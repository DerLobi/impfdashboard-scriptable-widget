this.vega=this.vega||{},this.vega.transforms=function(e,t,r){"use strict";const n=e=>new Uint8Array(e),i=e=>new Uint16Array(e),s=e=>new Uint32Array(e);function l(e,t,r){const l=(t<257?n:t<65537?i:s)(e);return r&&l.set(r),l}function o(e,t,r){const n=1<<t;return{one:n,zero:~n,range:r.slice(),bisect:e.bisect,index:e.index,size:e.size,onAdd(e,t){const r=this,i=r.bisect(r.range,e.value),s=e.index,l=i[0],o=i[1],f=s.length;let a;for(a=0;a<l;++a)t[s[a]]|=n;for(a=o;a<f;++a)t[s[a]]|=n;return r}}}function f(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function a(e){let t=e,r=e;function n(e,t,n,i){for(null==n&&(n=0),null==i&&(i=e.length);n<i;){const s=n+i>>>1;r(e[s],t)<0?n=s+1:i=s}return n}return 1===e.length&&(t=(t,r)=>e(t)-r,r=function(e){return(t,r)=>f(e(t),r)}(e)),{left:n,center:function(e,r,i,s){null==i&&(i=0),null==s&&(s=e.length);const l=n(e,r,i,s-1);return l>i&&t(e[l-1],r)>-t(e[l],r)?l-1:l},right:function(e,t,n,i){for(null==n&&(n=0),null==i&&(i=e.length);n<i;){const s=n+i>>>1;r(e[s],t)>0?i=s:n=s+1}return n}}}const u=a(f),d=u.right,h=u.left;a((function(e){return null===e?NaN:+e})).center;function c(){let e=s(0),t=[],r=0;return{insert:function(n,i,l){if(!i.length)return[];const o=r,f=i.length,a=s(f);let u,d,h,c=Array(f);for(h=0;h<f;++h)c[h]=n(i[h]),a[h]=h;if(c=function(e,t){return e.sort.call(t,(t,r)=>{const n=e[t],i=e[r];return n<i?-1:n>i?1:0}),function(e,t){return Array.from(t,t=>e[t])}(e,t)}(c,a),o)u=t,d=e,t=Array(o+f),e=s(o+f),function(e,t,r,n,i,s,l,o,f){let a,u=0,d=0;for(a=0;u<n&&d<l;++a)t[u]<i[d]?(o[a]=t[u],f[a]=r[u++]):(o[a]=i[d],f[a]=s[d++]+e);for(;u<n;++u,++a)o[a]=t[u],f[a]=r[u];for(;d<l;++d,++a)o[a]=i[d],f[a]=s[d]+e}(l,u,d,o,c,a,f,t,e);else{if(l>0)for(h=0;h<f;++h)a[h]+=l;t=c,e=a}return r=o+f,{index:a,value:c}},remove:function(n,i){const s=r;let l,o,f;for(o=0;!i[e[o]]&&o<s;++o);for(f=o;o<s;++o)i[l=e[o]]||(e[f]=l,t[f]=t[o],++f);r=s-n},bisect:function(e,n){let i;return n?i=n.length:(n=t,i=r),[h(n,e[0],0,i),d(n,e[1],0,i)]},reindex:function(t){for(let n=0,i=r;n<i;++n)e[n]=t[e[n]]},index:()=>e,size:()=>r}}function m(e){t.Transform.call(this,function(){let e=8,t=[],r=s(0),n=l(0,e),i=l(0,e);return{data:()=>t,seen:()=>r=function(e,t,r){return e.length>=t?e:((r=r||new e.constructor(t)).set(e),r)}(r,t.length),add(e){for(let r,n=0,i=t.length,s=e.length;n<s;++n)r=e[n],r._index=i++,t.push(r)},remove(e,r){const s=t.length,l=Array(s-e),o=t;let f,a,u;for(a=0;!r[a]&&a<s;++a)l[a]=t[a],o[a]=a;for(u=a;a<s;++a)f=t[a],r[a]?o[a]=-1:(o[a]=u,n[u]=n[a],i[u]=i[a],l[u]=f,f._index=u++),n[a]=0;return t=l,o},size:()=>t.length,curr:()=>n,prev:()=>i,reset:e=>i[e]=n[e],all:()=>e<257?255:e<65537?65535:4294967295,set(e,t){n[e]|=t},clear(e,t){n[e]&=~t},resize(t,r){(t>n.length||r>e)&&(e=Math.max(r,e),n=l(t,e,n),i=l(t,e))}}}(),e),this._indices=null,this._dims=null}function g(e){t.Transform.call(this,null,e)}return m.Definition={type:"CrossFilter",metadata:{},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"query",type:"array",array:!0,required:!0,content:{type:"number",array:!0,length:2}}]},r.inherits(m,t.Transform,{transform(e,t){return this._dims?e.modified("fields")||e.fields.some(e=>t.modified(e.fields))?this.reinit(e,t):this.eval(e,t):this.init(e,t)},init(e,t){const r=e.fields,n=e.query,i=this._indices={},s=this._dims=[],l=n.length;let f,a,u=0;for(;u<l;++u)f=r[u].fname,a=i[f]||(i[f]=c()),s.push(o(a,u,n[u]));return this.eval(e,t)},reinit(e,t){const r=t.materialize().fork(),n=e.fields,i=e.query,s=this._indices,l=this._dims,f=this.value,a=f.curr(),u=f.prev(),d=f.all(),h=r.rem=r.add,m=r.mod,g=i.length,p={};let v,y,x,_,A,b,M,q,z;if(u.set(a),t.rem.length&&(A=this.remove(e,t,r)),t.add.length&&f.add(t.add),t.mod.length)for(b={},_=t.mod,M=0,q=_.length;M<q;++M)b[_[M]._index]=1;for(M=0;M<g;++M)z=n[M],(!l[M]||e.modified("fields",M)||t.modified(z.fields))&&(x=z.fname,(v=p[x])||(s[x]=y=c(),p[x]=v=y.insert(z,t.source,0)),l[M]=o(y,M,i[M]).onAdd(v,a));for(M=0,q=f.data().length;M<q;++M)A[M]||(u[M]!==a[M]?h.push(M):b[M]&&a[M]!==d&&m.push(M));return f.mask=(1<<g)-1,r},eval(e,t){const r=t.materialize().fork(),n=this._dims.length;let i=0;return t.rem.length&&(this.remove(e,t,r),i|=(1<<n)-1),e.modified("query")&&!e.modified("fields")&&(i|=this.update(e,t,r)),t.add.length&&(this.insert(e,t,r),i|=(1<<n)-1),t.mod.length&&(this.modify(t,r),i|=(1<<n)-1),this.value.mask=i,r},insert(e,t,r){const n=t.add,i=this.value,s=this._dims,l=this._indices,o=e.fields,f={},a=r.add,u=i.size()+n.length,d=s.length;let h,c,m,g=i.size();i.resize(u,d),i.add(n);const p=i.curr(),v=i.prev(),y=i.all();for(h=0;h<d;++h)c=o[h].fname,m=f[c]||(f[c]=l[c].insert(o[h],n,g)),s[h].onAdd(m,p);for(;g<u;++g)v[g]=y,p[g]!==y&&a.push(g)},modify(e,t){const r=t.mod,n=this.value,i=n.curr(),s=n.all(),l=e.mod;let o,f,a;for(o=0,f=l.length;o<f;++o)a=l[o]._index,i[a]!==s&&r.push(a)},remove(e,t,r){const n=this._indices,i=this.value,s=i.curr(),l=i.prev(),o=i.all(),f={},a=r.rem,u=t.rem;let d,h,c,m;for(d=0,h=u.length;d<h;++d)c=u[d]._index,f[c]=1,l[c]=m=s[c],s[c]=o,m!==o&&a.push(c);for(c in n)n[c].remove(h,f);return this.reindex(t,h,f),f},reindex(e,t,r){const n=this._indices,i=this.value;e.runAfter(()=>{const e=i.remove(t,r);for(const t in n)n[t].reindex(e)})},update(e,t,r){const n=this._dims,i=e.query,s=t.stamp,l=n.length;let o,f,a=0;for(r.filters=0,f=0;f<l;++f)e.modified("query",f)&&(o=f,++a);if(1===a)a=n[o].one,this.incrementOne(n[o],i[o],r.add,r.rem);else for(f=0,a=0;f<l;++f)e.modified("query",f)&&(a|=n[f].one,this.incrementAll(n[f],i[f],s,r.add),r.rem=r.add);return a},incrementAll(e,t,r,n){const i=this.value,s=i.seen(),l=i.curr(),o=i.prev(),f=e.index(),a=e.bisect(e.range),u=e.bisect(t),d=u[0],h=u[1],c=a[0],m=a[1],g=e.one;let p,v,y;if(d<c)for(p=d,v=Math.min(c,h);p<v;++p)y=f[p],s[y]!==r&&(o[y]=l[y],s[y]=r,n.push(y)),l[y]^=g;else if(d>c)for(p=c,v=Math.min(d,m);p<v;++p)y=f[p],s[y]!==r&&(o[y]=l[y],s[y]=r,n.push(y)),l[y]^=g;if(h>m)for(p=Math.max(d,m),v=h;p<v;++p)y=f[p],s[y]!==r&&(o[y]=l[y],s[y]=r,n.push(y)),l[y]^=g;else if(h<m)for(p=Math.max(c,h),v=m;p<v;++p)y=f[p],s[y]!==r&&(o[y]=l[y],s[y]=r,n.push(y)),l[y]^=g;e.range=t.slice()},incrementOne(e,t,r,n){const i=this.value.curr(),s=e.index(),l=e.bisect(e.range),o=e.bisect(t),f=o[0],a=o[1],u=l[0],d=l[1],h=e.one;let c,m,g;if(f<u)for(c=f,m=Math.min(u,a);c<m;++c)g=s[c],i[g]^=h,r.push(g);else if(f>u)for(c=u,m=Math.min(f,d);c<m;++c)g=s[c],i[g]^=h,n.push(g);if(a>d)for(c=Math.max(f,d),m=a;c<m;++c)g=s[c],i[g]^=h,r.push(g);else if(a<d)for(c=Math.max(u,a),m=d;c<m;++c)g=s[c],i[g]^=h,n.push(g);e.range=t.slice()}}),g.Definition={type:"ResolveFilter",metadata:{},params:[{name:"ignore",type:"number",required:!0,description:"A bit mask indicating which filters to ignore."},{name:"filter",type:"object",required:!0,description:"Per-tuple filter bitmaps from a CrossFilter transform."}]},r.inherits(g,t.Transform,{transform(e,t){const r=~(e.ignore||0),n=e.filter,i=n.mask;if(0==(i&r))return t.StopPropagation;const s=t.fork(t.ALL),l=n.data(),o=n.curr(),f=n.prev(),a=e=>o[e]&r?null:l[e];return s.filter(s.MOD,a),i&i-1?(s.filter(s.ADD,e=>{const t=o[e]&r;return!t&&t^f[e]&r?l[e]:null}),s.filter(s.REM,e=>{const t=o[e]&r;return t&&!(t^t^f[e]&r)?l[e]:null})):(s.filter(s.ADD,a),s.filter(s.REM,e=>(o[e]&r)===i?l[e]:null)),s.filter(s.SOURCE,e=>a(e._index))}}),e.crossfilter=m,e.resolvefilter=g,e}({},vega,vega);
//# sourceMappingURL=vega-crossfilter.min.js.map
