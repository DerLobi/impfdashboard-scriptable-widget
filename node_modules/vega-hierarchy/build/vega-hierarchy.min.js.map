{"version":3,"file":"vega-hierarchy.min.js","sources":["../src/lookup.js","../../../node_modules/d3-hierarchy/src/cluster.js","../../../node_modules/d3-hierarchy/src/hierarchy/count.js","../../../node_modules/d3-hierarchy/src/hierarchy/index.js","../../../node_modules/d3-hierarchy/src/pack/enclose.js","../../../node_modules/d3-hierarchy/src/array.js","../../../node_modules/d3-hierarchy/src/pack/siblings.js","../../../node_modules/d3-hierarchy/src/accessors.js","../../../node_modules/d3-hierarchy/src/constant.js","../../../node_modules/d3-hierarchy/src/pack/index.js","../../../node_modules/d3-hierarchy/src/treemap/round.js","../../../node_modules/d3-hierarchy/src/treemap/dice.js","../../../node_modules/d3-hierarchy/src/hierarchy/each.js","../../../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","../../../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","../../../node_modules/d3-hierarchy/src/hierarchy/find.js","../../../node_modules/d3-hierarchy/src/hierarchy/sum.js","../../../node_modules/d3-hierarchy/src/hierarchy/sort.js","../../../node_modules/d3-hierarchy/src/hierarchy/path.js","../../../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","../../../node_modules/d3-hierarchy/src/hierarchy/descendants.js","../../../node_modules/d3-hierarchy/src/hierarchy/leaves.js","../../../node_modules/d3-hierarchy/src/hierarchy/links.js","../../../node_modules/d3-hierarchy/src/hierarchy/iterator.js","../../../node_modules/d3-hierarchy/src/stratify.js","../../../node_modules/d3-hierarchy/src/tree.js","../../../node_modules/d3-hierarchy/src/treemap/slice.js","../../../node_modules/d3-hierarchy/src/treemap/squarify.js","../../../node_modules/d3-hierarchy/src/treemap/resquarify.js","../src/Nest.js","../src/HierarchyLayout.js","../src/Pack.js","../src/Partition.js","../src/Stratify.js","../../../node_modules/d3-hierarchy/src/partition.js","../src/Tree.js","../src/TreeLinks.js","../src/Treemap.js","../../../node_modules/d3-hierarchy/src/treemap/binary.js","../../../node_modules/d3-hierarchy/src/treemap/sliceDice.js","../../../node_modules/d3-hierarchy/src/treemap/index.js"],"sourcesContent":["// Build lookup table mapping tuple keys to tree node instances\nexport default function(tree, key, filter) {\n  const map = {};\n  tree.each(node => {\n    const t = node.data;\n    if (filter(t)) map[key(t)] = node;\n  });\n  tree.lookup = map;\n  return tree;\n}\n","function defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\nfunction meanX(children) {\n  return children.reduce(meanXReduce, 0) / children.length;\n}\n\nfunction meanXReduce(x, c) {\n  return x + c.x;\n}\n\nfunction maxY(children) {\n  return 1 + children.reduce(maxYReduce, 0);\n}\n\nfunction maxYReduce(y, c) {\n  return Math.max(y, c.y);\n}\n\nfunction leafLeft(node) {\n  var children;\n  while (children = node.children) node = children[0];\n  return node;\n}\n\nfunction leafRight(node) {\n  var children;\n  while (children = node.children) node = children[children.length - 1];\n  return node;\n}\n\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n\n  function cluster(root) {\n    var previousNode,\n        x = 0;\n\n    // First walk, computing the initial x & y values.\n    root.eachAfter(function(node) {\n      var children = node.children;\n      if (children) {\n        node.x = meanX(children);\n        node.y = maxY(children);\n      } else {\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\n        node.y = 0;\n        previousNode = node;\n      }\n    });\n\n    var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n    // Second walk, normalizing x & y to the desired size.\n    return root.eachAfter(nodeSize ? function(node) {\n      node.x = (node.x - root.x) * dx;\n      node.y = (root.y - node.y) * dy;\n    } : function(node) {\n      node.x = (node.x - x0) / (x1 - x0) * dx;\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n    });\n  }\n\n  cluster.separation = function(x) {\n    return arguments.length ? (separation = x, cluster) : separation;\n  };\n\n  cluster.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n  };\n\n  cluster.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return cluster;\n}\n","function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_find from \"./find.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nimport node_iterator from \"./iterator.js\";\n\nexport default function hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n    if (children === undefined) children = mapChildren;\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n\n  var root = new Node(data),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction objectChildren(d) {\n  return d.children;\n}\n\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n\nfunction copyData(node) {\n  if (node.data.value !== undefined) node.value = node.data.value;\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  find: node_find,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy,\n  [Symbol.iterator]: node_iterator\n};\n","import {shuffle} from \"../array.js\";\n\nexport default function(circles) {\n  var i = 0, n = (circles = shuffle(Array.from(circles))).length, B = [], p, e;\n\n  while (i < n) {\n    p = circles[i];\n    if (e && enclosesWeak(e, p)) ++i;\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n  }\n\n  return e;\n}\n\nfunction extendBasis(B, p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i])\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error;\n}\n\nfunction enclosesNot(a, b) {\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(a, b) {\n  var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(a, B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis(B) {\n  switch (B.length) {\n    case 1: return encloseBasis1(B[0]);\n    case 2: return encloseBasis2(B[0], B[1]);\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\n  }\n}\n\nfunction encloseBasis1(a) {\n  return {\n    x: a.x,\n    y: a.y,\n    r: a.r\n  };\n}\n\nfunction encloseBasis2(a, b) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n  return {\n    x: (x1 + x2 + x21 / l * r21) / 2,\n    y: (y1 + y2 + y21 / l * r21) / 2,\n    r: (l + r1 + r2) / 2\n  };\n}\n\nfunction encloseBasis3(a, b, c) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x3 = c.x, y3 = c.y, r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return {\n    x: x1 + xa + xb * r,\n    y: y1 + ya + yb * r,\n    r: r\n  };\n}\n","export default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n\nexport function shuffle(array) {\n  var m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n","import array from \"../array.js\";\nimport enclose from \"./enclose.js\";\n\nfunction place(b, a, c) {\n  var dx = b.x - a.x, x, a2,\n      dy = b.y - a.y, y, b2,\n      d2 = dx * dx + dy * dy;\n  if (d2) {\n    a2 = a.r + c.r, a2 *= a2;\n    b2 = b.r + c.r, b2 *= b2;\n    if (a2 > b2) {\n      x = (d2 + b2 - a2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n      c.x = b.x - x * dx - y * dy;\n      c.y = b.y - x * dy + y * dx;\n    } else {\n      x = (d2 + a2 - b2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n      c.x = a.x + x * dx - y * dy;\n      c.y = a.y + x * dy + y * dx;\n    }\n  } else {\n    c.x = a.x + c.r;\n    c.y = a.y;\n  }\n}\n\nfunction intersects(a, b) {\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nexport function packEnclose(circles) {\n  if (!(n = (circles = array(circles)).length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node(a), b = new Node(b), c = new Node(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle…\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // “Closeness” is determined by linear distance along the front-chain.\n    // “Ahead” or “behind” is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nexport default function(circles) {\n  packEnclose(circles);\n  return circles;\n}\n","export function optional(f) {\n  return f == null ? null : required(f);\n}\n\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n","export function constantZero() {\n  return 0;\n}\n\nexport default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {packEnclose} from \"./siblings.js\";\nimport {optional} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nfunction defaultRadius(d) {\n  return Math.sqrt(d.value);\n}\n\nexport default function() {\n  var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n\n  function pack(root) {\n    root.x = dx / 2, root.y = dy / 2;\n    if (radius) {\n      root.eachBefore(radiusLeaf(radius))\n          .eachAfter(packChildren(padding, 0.5))\n          .eachBefore(translateChild(1));\n    } else {\n      root.eachBefore(radiusLeaf(defaultRadius))\n          .eachAfter(packChildren(constantZero, 1))\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n    }\n    return root;\n  }\n\n  pack.radius = function(x) {\n    return arguments.length ? (radius = optional(x), pack) : radius;\n  };\n\n  pack.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n  };\n\n  pack.padding = function(x) {\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n  };\n\n  return pack;\n}\n\nfunction radiusLeaf(radius) {\n  return function(node) {\n    if (!node.children) {\n      node.r = Math.max(0, +radius(node) || 0);\n    }\n  };\n}\n\nfunction packChildren(padding, k) {\n  return function(node) {\n    if (children = node.children) {\n      var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\n      e = packEnclose(children);\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n      node.r = e + r;\n    }\n  };\n}\n\nfunction translateChild(k) {\n  return function(node) {\n    var parent = node.parent;\n    node.r *= k;\n    if (parent) {\n      node.x = parent.x + k * node.x;\n      node.y = parent.y + k * node.y;\n    }\n  };\n}\n","export default function(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], next = [], children, i, n, index = -1;\n  while (node = nodes.pop()) {\n    next.push(node);\n    if (children = node.children) {\n      for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  while (node = next.pop()) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], children, i, index = -1;\n  while (node = nodes.pop()) {\n    callback.call(that, node, ++index, this);\n    if (children = node.children) {\n      for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  return this;\n}\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    if (callback.call(that, node, ++index, this)) {\n      return node;\n    }\n  }\n}\n","export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n","export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n","export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n","export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n","export default function() {\n  return Array.from(this);\n}\n","export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n","export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n","export default function*() {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      yield node;\n      if (children = node.children) {\n        for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    }\n  } while (next.length);\n}\n","import {required} from \"./accessors.js\";\nimport {Node, computeHeight} from \"./hierarchy/index.js\";\n\nvar preroot = {depth: -1},\n    ambiguous = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nexport default function() {\n  var id = defaultId,\n      parentId = defaultParentId;\n\n  function stratify(data) {\n    var nodes = Array.from(data),\n        n = nodes.length,\n        d,\n        i,\n        root,\n        parent,\n        node,\n        nodeId,\n        nodeKey,\n        nodeByKey = new Map;\n\n    for (i = 0; i < n; ++i) {\n      d = nodes[i], node = nodes[i] = new Node(d);\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = node.id = nodeId;\n        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);\n      }\n      if ((nodeId = parentId(d, i, data)) != null && (nodeId += \"\")) {\n        node.parent = nodeId;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (nodeId = node.parent) {\n        parent = nodeByKey.get(nodeId);\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      } else {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = required(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\n  };\n\n  return stratify;\n}\n","import {Node} from \"./hierarchy/index.js\";\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.’s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\n\nexport var phi = (1 + Math.sqrt(5)) / 2;\n\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nexport default (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nimport {phi, squarifyRatio} from \"./squarify.js\";\n\nexport default (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);\n        else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n","import lookup from './lookup';\nimport {Transform, ingest, isTuple, tupleid} from 'vega-dataflow';\nimport {array, error, inherits} from 'vega-util';\nimport {hierarchy} from 'd3-hierarchy';\n\n /**\n  * Nest tuples into a tree structure, grouped by key values.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n  * @param {boolean} [params.generate=false] - A boolean flag indicating if\n  *   non-leaf nodes generated by this transform should be included in the\n  *   output. The default (false) includes only the input data (leaf nodes)\n  *   in the data stream.\n  */\nexport default function Nest(params) {\n  Transform.call(this, null, params);\n}\n\nNest.Definition = {\n  'type': 'Nest',\n  'metadata': {'treesource': true, 'changes': true},\n  'params': [\n    { 'name': 'keys', 'type': 'field', 'array': true },\n    { 'name': 'generate', 'type': 'boolean' }\n  ]\n};\n\nconst children = n => n.values;\n\ninherits(Nest, Transform, {\n  transform(_, pulse) {\n    if (!pulse.source) {\n      error('Nest transform requires an upstream data source.');\n    }\n\n    var gen = _.generate,\n        mod = _.modified(),\n        out = pulse.clone(),\n        tree = this.value;\n\n    if (!tree || mod || pulse.changed()) {\n      // collect nodes to remove\n      if (tree) {\n        tree.each(node => {\n          if (node.children && isTuple(node.data)) {\n            out.rem.push(node.data);\n          }\n        });\n      }\n\n      // generate new tree structure\n      this.value = tree = hierarchy({\n        values: array(_.keys)\n          .reduce((n, k) => { n.key(k); return n; }, nest())\n          .entries(out.source)\n      }, children);\n\n      // collect nodes to add\n      if (gen) {\n        tree.each(node => {\n          if (node.children) {\n            node = ingest(node.data);\n            out.add.push(node);\n            out.source.push(node);\n          }\n        });\n      }\n\n      // build lookup table\n      lookup(tree, tupleid, tupleid);\n    }\n\n    out.source.root = tree;\n    return out;\n  }\n});\n\nfunction nest() {\n  const keys = [],\n        nest = {\n          entries: array => entries(apply(array, 0), 0),\n          key: d => (keys.push(d), nest)\n        };\n\n  function apply(array, depth) {\n    if (depth >= keys.length) {\n      return array;\n    }\n\n    const n = array.length,\n          key = keys[depth++],\n          valuesByKey = {},\n          result = {};\n\n    let i = -1, keyValue, value, values;\n\n    while (++i < n) {\n      keyValue = key(value = array[i]) + '';\n      if (values = valuesByKey[keyValue]) {\n        values.push(value);\n      } else {\n        valuesByKey[keyValue] = [value];\n      }\n    }\n\n    for (keyValue in valuesByKey) {\n      result[keyValue] = apply(valuesByKey[keyValue], depth);\n    }\n\n    return result;\n  }\n\n  function entries(map, depth) {\n    if (++depth > keys.length) return map;\n    const array = [];\n    for (const key in map) {\n      array.push({\n        key,\n        values: entries(map[key], depth)\n      });\n    }\n    return array;\n  }\n\n  return nest;\n}\n","import {Transform, stableCompare} from 'vega-dataflow';\nimport {error, inherits, one} from 'vega-util';\n\n/**\n * Abstract class for tree layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nexport default function HierarchyLayout(params) {\n  Transform.call(this, null, params);\n}\n\nconst defaultSeparation = (a, b) => a.parent === b.parent ? 1 : 2;\n\ninherits(HierarchyLayout, Transform, {\n  transform(_, pulse) {\n    if (!pulse.source || !pulse.source.root) {\n      error(this.constructor.name\n        + ' transform requires a backing tree data source.');\n    }\n\n    const layout = this.layout(_.method),\n          fields = this.fields,\n          root = pulse.source.root,\n          as = _.as || fields;\n\n    if (_.field) root.sum(_.field); else root.count();\n    if (_.sort) root.sort(stableCompare(_.sort, d => d.data));\n\n    setParams(layout, this.params, _);\n    if (layout.separation) {\n      layout.separation(_.separation !== false ? defaultSeparation : one);\n    }\n\n    try {\n      this.value = layout(root);\n    } catch (err) {\n      error(err);\n    }\n    root.each(node => setFields(node, fields, as));\n\n    return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n  }\n});\n\nfunction setParams(layout, params, _) {\n  for (let p, i=0, n=params.length; i<n; ++i) {\n    p = params[i];\n    if (p in _) layout[p](_[p]);\n  }\n}\n\nfunction setFields(node, fields, as) {\n  const t = node.data,\n        n = fields.length - 1;\n  for (let i=0; i<n; ++i) {\n    t[as[i]] = node[fields[i]];\n  }\n  t[as[n]] = node.children ? node.children.length : 0;\n}\n","import HierarchyLayout from './HierarchyLayout';\nimport {inherits} from 'vega-util';\nimport {pack} from 'd3-hierarchy';\n\nconst Output = ['x', 'y', 'r', 'depth', 'children'];\n\n/**\n * Packed circle tree layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nexport default function Pack(params) {\n  HierarchyLayout.call(this, params);\n}\n\nPack.Definition = {\n  'type': 'Pack',\n  'metadata': {'tree': true, 'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'padding', 'type': 'number', 'default': 0 },\n    { 'name': 'radius', 'type': 'field', 'default': null },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': Output.length, 'default': Output }\n  ]\n};\n\ninherits(Pack, HierarchyLayout, {\n  layout: pack,\n  params: ['radius', 'size', 'padding'],\n  fields: Output\n});\n","import HierarchyLayout from './HierarchyLayout';\nimport {inherits} from 'vega-util';\nimport {partition} from 'd3-hierarchy';\n\nconst Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n/**\n * Partition tree layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nexport default function Partition(params) {\n  HierarchyLayout.call(this, params);\n}\n\nPartition.Definition = {\n  'type': 'Partition',\n  'metadata': {'tree': true, 'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'padding', 'type': 'number', 'default': 0 },\n    { 'name': 'round', 'type': 'boolean', 'default': false },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': Output.length, 'default': Output }\n  ]\n};\n\ninherits(Partition, HierarchyLayout, {\n  layout: partition,\n  params: ['size', 'round', 'padding'],\n  fields: Output\n});\n","import lookup from './lookup';\nimport {Transform} from 'vega-dataflow';\nimport {error, inherits, truthy} from 'vega-util';\nimport {stratify} from 'd3-hierarchy';\n\n /**\n  * Stratify a collection of tuples into a tree structure based on\n  * id and parent id fields.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  * @param {function(object): *} params.key - Unique key field for each tuple.\n  * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n  */\nexport default function Stratify(params) {\n  Transform.call(this, null, params);\n}\n\nStratify.Definition = {\n  'type': 'Stratify',\n  'metadata': {'treesource': true},\n  'params': [\n    { 'name': 'key', 'type': 'field', 'required': true },\n    { 'name': 'parentKey', 'type': 'field', 'required': true  }\n  ]\n};\n\ninherits(Stratify, Transform, {\n  transform(_, pulse) {\n    if (!pulse.source) {\n      error('Stratify transform requires an upstream data source.');\n    }\n\n    let tree = this.value;\n\n    const mod = _.modified(),\n          out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),\n          run = !tree\n            || mod\n            || pulse.changed(pulse.ADD_REM)\n            || pulse.modified(_.key.fields)\n            || pulse.modified(_.parentKey.fields);\n\n    // prevent upstream source pollution\n    out.source = out.source.slice();\n\n    if (run) {\n      tree = out.source.length\n        ? lookup(\n            stratify().id(_.key).parentId(_.parentKey)(out.source),\n            _.key,\n            truthy\n          )\n        : lookup(stratify()([{}]), _.key, _.key);\n    }\n\n    out.source.root = this.value = tree;\n    return out;\n  }\n});\n","import roundNode from \"./treemap/round.js\";\nimport treemapDice from \"./treemap/dice.js\";\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 =\n    root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function(node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function(x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function(x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}\n","import HierarchyLayout from './HierarchyLayout';\nimport {error, hasOwnProperty, inherits} from 'vega-util';\nimport {cluster, tree} from 'd3-hierarchy';\n\nconst Layouts = {\n  tidy: tree,\n  cluster: cluster\n};\n\nconst Output = ['x', 'y', 'depth', 'children'];\n\n/**\n * Tree layout. Depending on the method parameter, performs either\n * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nexport default function Tree(params) {\n  HierarchyLayout.call(this, params);\n}\n\nTree.Definition = {\n  'type': 'Tree',\n  'metadata': {'tree': true, 'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'method', 'type': 'enum', 'default': 'tidy', 'values': ['tidy', 'cluster'] },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'nodeSize', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'separation', 'type': 'boolean', 'default': true },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': Output.length, 'default': Output }\n  ]\n};\n\ninherits(Tree, HierarchyLayout, {\n  /**\n   * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n   */\n  layout(method) {\n    const m = method || 'tidy';\n    if (hasOwnProperty(Layouts, m)) return Layouts[m]();\n    else error('Unrecognized Tree layout method: ' + m);\n  },\n  params: ['size', 'nodeSize'],\n  fields: Output\n});\n","import {Transform, ingest, tupleid} from 'vega-dataflow';\nimport {error, inherits} from 'vega-util';\n\n /**\n  * Generate tuples representing links between tree nodes.\n  * The resulting tuples will contain 'source' and 'target' fields,\n  * which point to parent and child node tuples, respectively.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  */\nexport default function TreeLinks(params) {\n  Transform.call(this, [], params);\n}\n\nTreeLinks.Definition = {\n  'type': 'TreeLinks',\n  'metadata': {'tree': true, 'generates': true, 'changes': true},\n  'params': []\n};\n\ninherits(TreeLinks, Transform, {\n  transform(_, pulse) {\n    const links = this.value,\n          tree = pulse.source && pulse.source.root,\n          out = pulse.fork(pulse.NO_SOURCE),\n          lut = {};\n\n    if (!tree) error('TreeLinks transform requires a tree data source.');\n\n    if (pulse.changed(pulse.ADD_REM)) {\n      // remove previous links\n      out.rem = links;\n\n      // build lookup table of valid tuples\n      pulse.visit(pulse.SOURCE, t => lut[tupleid(t)] = 1);\n\n      // generate links for all edges incident on valid tuples\n      tree.each(node => {\n        const t = node.data,\n              p = node.parent && node.parent.data;\n        if (p && lut[tupleid(t)] && lut[tupleid(p)]) {\n          out.add.push(ingest({source: p, target: t}));\n        }\n      });\n      this.value = out.add;\n    }\n\n    else if (pulse.changed(pulse.MOD)) {\n      // build lookup table of modified tuples\n      pulse.visit(pulse.MOD, t => lut[tupleid(t)] = 1);\n\n      // gather links incident on modified tuples\n      links.forEach(link => {\n        if (lut[tupleid(link.source)] || lut[tupleid(link.target)]) {\n          out.mod.push(link);\n        }\n      });\n    }\n\n    return out;\n  }\n});\n","import HierarchyLayout from './HierarchyLayout';\nimport {error, hasOwnProperty, inherits} from 'vega-util';\nimport {\n  treemap,\n  treemapBinary,\n  treemapDice,\n  treemapResquarify,\n  treemapSlice,\n  treemapSliceDice,\n  treemapSquarify\n} from 'd3-hierarchy';\n\nconst Tiles = {\n  binary: treemapBinary,\n  dice: treemapDice,\n  slice: treemapSlice,\n  slicedice: treemapSliceDice,\n  squarify: treemapSquarify,\n  resquarify: treemapResquarify\n};\n\nconst Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n/**\n * Treemap layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nexport default function Treemap(params) {\n  HierarchyLayout.call(this, params);\n}\n\nTreemap.Definition = {\n  'type': 'Treemap',\n  'metadata': {'tree': true, 'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'method', 'type': 'enum', 'default': 'squarify',\n      'values': ['squarify', 'resquarify', 'binary', 'dice', 'slice', 'slicedice'] },\n    { 'name': 'padding', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingInner', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingOuter', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingTop', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingRight', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingBottom', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingLeft', 'type': 'number', 'default': 0 },\n    { 'name': 'ratio', 'type': 'number', 'default': 1.618033988749895 },\n    { 'name': 'round', 'type': 'boolean', 'default': false },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': Output.length, 'default': Output }\n  ]\n};\n\ninherits(Treemap, HierarchyLayout, {\n  /**\n   * Treemap layout generator. Adds 'method' and 'ratio' parameters\n   * to configure the underlying tile method.\n   */\n  layout() {\n    const x = treemap();\n\n    x.ratio = _ => {\n      const t = x.tile();\n      if (t.ratio) x.tile(t.ratio(_));\n    };\n\n    x.method = _ => {\n      if (hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);\n      else error('Unrecognized Treemap layout method: ' + _);\n    };\n\n    return x;\n  },\n\n  params: [\n    'method', 'ratio', 'size', 'round',\n    'padding', 'paddingInner', 'paddingOuter',\n    'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'\n  ],\n\n  fields: Output\n});\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n","import dice from \"./dice.js\";\nimport slice from \"./slice.js\";\n\nexport default function(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? slice : dice)(parent, x0, y0, x1, y1);\n}\n","import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport {required} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nexport default function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n"],"names":["tree","key","filter","map","each","node","t","data","lookup","defaultSeparation","a","b","parent","meanXReduce","x","c","maxYReduce","y","Math","max","count","sum","children","i","length","value","hierarchy","Map","undefined","mapChildren","objectChildren","child","childs","n","root","Node","nodes","pop","Array","from","push","depth","eachBefore","computeHeight","d","isArray","copyData","height","this","circles","p","e","array","m","random","shuffle","B","enclosesWeak","encloseBasis","extendBasis","j","enclosesWeakAll","enclosesNot","encloseBasis2","encloseBasis3","Error","dr","r","dx","dy","x1","y1","r1","x2","y2","r2","x21","y21","r21","l","sqrt","x3","y3","r3","a2","a3","b2","b3","c2","c3","d1","d2","d3","ab","xa","xb","ya","yb","A","C","place","intersects","score","_","next","circle","previous","packEnclose","aa","ca","k","sj","sk","pack","enclose","optional","f","required","constantZero","defaultRadius","radiusLeaf","radius","packChildren","padding","translateChild","x0","round","y0","prototype","constructor","eachAfter","callback","that","index","call","find","sort","compare","path","end","start","ancestor","aNodes","ancestors","bNodes","leastCommonAncestor","splice","descendants","leaves","links","source","target","copy","Symbol","iterator","current","reverse","preroot","ambiguous","defaultId","id","defaultParentId","parentId","stratify","nodeId","nodeKey","nodeByKey","set","has","get","arguments","nextLeft","v","nextRight","moveSubtree","wm","wp","shift","change","s","z","nextAncestor","vim","TreeNode","Object","create","phi","squarifyRatio","ratio","row","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","rows","i0","i1","dice","slice","treemapDice","treemapSlice","custom","squarify","resquarify","_squarify","Nest","params","Transform","Definition","values","nest","keys","entries","apply","valuesByKey","result","keyValue","HierarchyLayout","transform","pulse","error","gen","generate","mod","modified","out","clone","changed","isTuple","rem","reduce","ingest","add","tupleid","name","layout","method","fields","as","field","stableCompare","setParams","separation","one","err","setFields","reflow","modifies","Output","Pack","min","size","constant","Partition","Stratify","partition","positionNode","roundNode","fork","ALL","materialize","SOURCE","run","ADD_REM","parentKey","truthy","Layouts","tidy","nodeSize","treeRoot","firstWalk","secondWalk","sizeNode","left","right","bottom","tx","kx","ky","siblings","w","executeShifts","midpoint","vip","vop","vom","sip","sop","sim","som","apportion","cluster","previousNode","meanX","maxY","leafLeft","leafRight","Tree","TreeLinks","hasOwnProperty","NO_SOURCE","lut","visit","MOD","forEach","link","Tiles","binary","sums","valueOffset","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","slicedice","treemapSquarify","treemapResquarify","Treemap","tile","paddingStack","paddingInner","paddingTop","paddingRight","paddingBottom","paddingLeft","treemap","paddingOuter"],"mappings":"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"}