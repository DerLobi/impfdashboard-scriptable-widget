{"version":3,"file":"vega-label.min.js","sources":["../src/util/markBitmaps.js","../src/util/Bitmap.js","../src/util/scaler.js","../src/util/placeAreaLabel/common.js","../src/util/placeAreaLabel/placeFloodFill.js","../src/util/placeMarkLabel.js","../src/LabelLayout.js","../src/util/placeAreaLabel/placeNaive.js","../src/util/placeAreaLabel/placeReducedSearch.js","../src/Label.js"],"sourcesContent":["import {canvas} from 'vega-canvas';\nimport {rederive} from 'vega-dataflow';\nimport {Marks} from 'vega-scenegraph';\n\n// bit mask for getting first 2 bytes of alpha value\nconst ALPHA_MASK = 0xff000000;\n\n// alpha value equivalent to opacity 0.0625\nconst INSIDE_OPACITY_IN_ALPHA = 0x10000000;\nconst INSIDE_OPACITY = 0.0625;\n\nexport function baseBitmaps($, data) {\n  const bitmap = $.bitmap();\n  // when there is no base mark but data points are to be avoided\n  (data || []).forEach(d => bitmap.set($(d.boundary[0]), $(d.boundary[3])));\n  return [bitmap, undefined];\n}\n\nexport function markBitmaps($, avoidMarks, labelInside, isGroupArea) {\n  // create canvas\n  const width = $.width,\n        height = $.height,\n        border = labelInside || isGroupArea,\n        context = canvas(width, height).getContext('2d');\n\n  // render all marks to be avoided into canvas\n  avoidMarks.forEach(items => draw(context, items, border));\n\n  // get canvas buffer, create bitmaps\n  const buffer = new Uint32Array(context.getImageData(0, 0, width, height).data.buffer),\n        layer1 = $.bitmap(),\n        layer2 = border && $.bitmap();\n\n  // populate bitmap layers\n  let x, y, u, v, alpha;\n  for (y=0; y < height; ++y) {\n    for (x=0; x < width; ++x) {\n      alpha = buffer[y * width + x] & ALPHA_MASK;\n      if (alpha) {\n        u = $(x);\n        v = $(y);\n        if (!isGroupArea) layer1.set(u, v); // update interior bitmap\n        if (border && alpha ^ INSIDE_OPACITY_IN_ALPHA) layer2.set(u, v); // update border bitmap\n      }\n    }\n  }\n\n  return [layer1, layer2];\n}\n\nfunction draw(context, items, interior) {\n  if (!items.length) return;\n  const type = items[0].mark.marktype;\n\n  if (type === 'group') {\n    items.forEach(group => {\n      group.items.forEach(mark => draw(context, mark.items, interior));\n    });\n  } else {\n    Marks[type].draw(context, {items: interior ? items.map(prepare) : items});\n  }\n}\n\n/**\n * Prepare item before drawing into canvas (setting stroke and opacity)\n * @param {object} source item to be prepared\n * @returns prepared item\n */\nfunction prepare(source) {\n  const item = rederive(source, {});\n\n  if (item.stroke) {\n    item.strokeOpacity = 1;\n  }\n\n  if (item.fill) {\n    item.fillOpacity = INSIDE_OPACITY;\n    item.stroke = '#000';\n    item.strokeOpacity = 1;\n    item.strokeWidth = 2;\n  }\n\n  return item;\n}\n","const DIV = 5,   // bit shift from x, y index to bit vector array index\n      MOD = 31,  // bit mask for index lookup within a bit vector\n      SIZE = 32, // individual bit vector size\n      RIGHT0 = new Uint32Array(SIZE + 1), // left-anchored bit vectors, full -> 0\n      RIGHT1 = new Uint32Array(SIZE + 1); // right-anchored bit vectors, 0 -> full\n\nRIGHT1[0] = 0;\nRIGHT0[0] = ~RIGHT1[0];\nfor (let i=1; i <= SIZE; ++i) {\n  RIGHT1[i] = (RIGHT1[i - 1] << 1) | 1;\n  RIGHT0[i] = ~RIGHT1[i];\n}\n\nexport default function(w, h) {\n  const array = new Uint32Array(~~((w * h + SIZE) / SIZE));\n\n  function _set(index, mask) {\n    array[index] |= mask;\n  }\n\n  function _clear(index, mask) {\n    array[index] &= mask;\n  }\n\n  return {\n    array: array,\n\n    get: (x, y) => {\n      const index = y * w + x;\n      return array[index >>> DIV] & (1 << (index & MOD));\n    },\n\n    set: (x, y) => {\n      const index = y * w + x;\n      _set(index >>> DIV, 1 << (index & MOD));\n    },\n\n    clear: (x, y) => {\n      const index = y * w + x;\n      _clear(index >>> DIV, ~(1 << (index & MOD)));\n    },\n\n    getRange: (x, y, x2, y2) => {\n      let r = y2, start, end, indexStart, indexEnd;\n      for (; r >= y; --r) {\n        start = r * w + x;\n        end = r * w + x2;\n        indexStart = start >>> DIV;\n        indexEnd = end >>> DIV;\n        if (indexStart === indexEnd) {\n          if (array[indexStart] & RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]) {\n            return true;\n          }\n        } else {\n          if (array[indexStart] & RIGHT0[start & MOD]) return true;\n          if (array[indexEnd] & RIGHT1[(end & MOD) + 1]) return true;\n          for (let i = indexStart + 1; i < indexEnd; ++i) {\n            if (array[i]) return true;\n          }\n        }\n      }\n      return false;\n    },\n\n    setRange: (x, y, x2, y2) => {\n      let start, end, indexStart, indexEnd, i;\n      for (; y <= y2; ++y) {\n        start = y * w + x;\n        end = y * w + x2;\n        indexStart = start >>> DIV;\n        indexEnd = end >>> DIV;\n        if (indexStart === indexEnd) {\n          _set(indexStart, RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]);\n        } else {\n          _set(indexStart, RIGHT0[start & MOD]);\n          _set(indexEnd, RIGHT1[(end & MOD) + 1]);\n          for (i = indexStart + 1; i < indexEnd; ++i) _set(i, 0xffffffff);\n        }\n      }\n    },\n\n    clearRange: (x, y, x2, y2) => {\n      let start, end, indexStart, indexEnd, i;\n      for (; y <= y2; ++y) {\n        start = y * w + x;\n        end = y * w + x2;\n        indexStart = start >>> DIV;\n        indexEnd = end >>> DIV;\n        if (indexStart === indexEnd) {\n          _clear(indexStart, RIGHT1[start & MOD] | RIGHT0[(end & MOD) + 1]);\n        } else {\n          _clear(indexStart, RIGHT1[start & MOD]);\n          _clear(indexEnd, RIGHT0[(end & MOD) + 1]);\n          for (i = indexStart + 1; i < indexEnd; ++i) _clear(i, 0);\n        }\n      }\n    },\n\n    outOfBounds: (x, y, x2, y2) => x < 0 || y < 0 || y2 >= h || x2 >= w\n  };\n}","import Bitmap from './Bitmap';\n\nexport default function(width, height, padding) {\n  const ratio = Math.max(1, Math.sqrt((width * height) / 1e6)),\n        w = ~~((width + 2 * padding + ratio) / ratio),\n        h = ~~((height + 2 * padding + ratio) / ratio),\n        scale = _ => ~~((_ + padding) / ratio);\n\n  scale.invert = _ => (_ * ratio) - padding;\n  scale.bitmap = () => Bitmap(w, h);\n  scale.ratio = ratio;\n  scale.padding = padding;\n  scale.width = width;\n  scale.height = height;\n\n  return scale;\n}","export function outOfBounds(x, y, textWidth, textHeight, width, height) {\n  let r = textWidth / 2;\n  return x - r < 0\n      || x + r > width\n      || y - (r = textHeight / 2) < 0\n      || y + r > height;\n}\n\nexport function collision($, x, y, textHeight, textWidth, h, bm0, bm1) {\n  const w = (textWidth * h) / (textHeight * 2),\n        x1 = $(x - w),\n        x2 = $(x + w),\n        y1 = $(y - (h = h/2)),\n        y2 = $(y + h);\n\n  return bm0.outOfBounds(x1, y1, x2, y2)\n      || bm0.getRange(x1, y1, x2, y2)\n      || (bm1 && bm1.getRange(x1, y1, x2, y2));\n}","import {textMetrics} from 'vega-scenegraph';\nimport {collision, outOfBounds} from './common';\n\n// pixel direction offsets for flood fill search\nconst X_DIR = [-1, -1, 1, 1];\nconst Y_DIR = [-1, 1, -1, 1];\n\nexport default function($, bitmaps, avoidBaseMark, markIndex) {\n  const width = $.width,\n      height = $.height,\n      bm0 = bitmaps[0], // where labels have been placed\n      bm1 = bitmaps[1], // area outlines\n      bm2 = $.bitmap(); // flood-fill visitations\n\n  // try to place a label within an input area mark\n  return function(d) {\n    const items = d.datum.datum.items[markIndex].items, // area points\n          n = items.length, // number of points\n          textHeight = d.datum.fontSize, // label width\n          textWidth = textMetrics.width(d.datum, d.datum.text), // label height\n          stack = []; // flood fill stack\n\n    let maxSize = avoidBaseMark ? textHeight : 0,\n        labelPlaced = false,\n        labelPlaced2 = false,\n        maxAreaWidth = 0,\n        x1, x2, y1, y2, x, y, _x, _y, lo, hi, mid, areaWidth;\n\n    // for each area sample point\n    for (let i=0; i<n; ++i) {\n      x1 = items[i].x;\n      y1 = items[i].y;\n      x2 = items[i].x2 === undefined ? x1 : items[i].x2;\n      y2 = items[i].y2 === undefined ? y1 : items[i].y2;\n\n      // add scaled center point to stack\n      stack.push([$((x1 + x2) / 2), $((y1 + y2) / 2)]);\n\n      // perform flood fill, visit points\n      while (stack.length) {\n        [_x, _y] = stack.pop();\n\n        // exit if point already marked\n        if (bm0.get(_x, _y) || bm1.get(_x, _y) || bm2.get(_x, _y)) continue;\n\n        // mark point in flood fill bitmap\n        // add search points for all (in bound) directions\n        bm2.set(_x, _y);\n        for (let j=0; j<4; ++j) {\n          x = _x + X_DIR[j];\n          y = _y + Y_DIR[j];\n          if (!bm2.outOfBounds(x, y, x, y)) stack.push([x, y]);\n        }\n\n        // unscale point back to x, y space\n        x = $.invert(_x);\n        y = $.invert(_y);\n        lo = maxSize;\n        hi = height; // TODO: make this bound smaller\n\n        if (\n          !outOfBounds(x, y, textWidth, textHeight, width, height) &&\n          !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) &&\n          !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)\n        ) {\n          // if the label fits at the current sample point,\n          // perform binary search to find the largest font size that fits\n          while (hi - lo >= 1) {\n            mid = (lo + hi) / 2;\n            if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) {\n              hi = mid;\n            } else {\n              lo = mid;\n            }\n          }\n          // place label if current lower bound exceeds prior max font size\n          if (lo > maxSize) {\n            d.x = x;\n            d.y = y;\n            maxSize = lo;\n            labelPlaced = true;\n          }\n        }\n      }\n\n      // place label at slice center if not placed through other means\n      // and if we're not avoiding overlap with other areas\n      if (!labelPlaced && !avoidBaseMark) {\n        // one span is zero, hence we can add\n        areaWidth = Math.abs(x2 - x1 + y2 - y1);\n        x = (x1 + x2) / 2;\n        y = (y1 + y2) / 2;\n\n        // place label if it fits and improves the max area width\n        if (\n          areaWidth >= maxAreaWidth &&\n          !outOfBounds(x, y, textWidth, textHeight, width, height) &&\n          !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)\n        ) {\n          maxAreaWidth = areaWidth;\n          d.x = x;\n          d.y = y;\n          labelPlaced2 = true;\n        }\n      }\n    }\n\n    // record current label placement information, update label bitmap\n    if (labelPlaced || labelPlaced2) {\n      x = textWidth / 2;\n      y = textHeight / 2;\n      bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));\n      d.align = 'center';\n      d.baseline = 'middle';\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n","import {textMetrics} from 'vega-scenegraph';\n\nconst Aligns = ['right', 'center', 'left'],\n      Baselines = ['bottom', 'middle', 'top'];\n\nexport default function($, bitmaps, anchors, offsets) {\n  const width = $.width,\n        height = $.height,\n        bm0 = bitmaps[0],\n        bm1 = bitmaps[1],\n        n = offsets.length;\n\n  return function(d) {\n    const boundary = d.boundary,\n          textHeight = d.datum.fontSize;\n\n    // can not be placed if the mark is not visible in the graph bound\n    if (boundary[2] < 0 || boundary[5] < 0 || boundary[0] > width || boundary[3] > height) {\n      return false;\n    }\n\n    let textWidth = 0,\n        dx, dy, isInside, sizeFactor, insideFactor,\n        x1, x2, y1, y2, xc, yc,\n        _x1, _x2, _y1, _y2;\n\n    // for each anchor and offset\n    for (let i=0; i<n; ++i) {\n      dx = (anchors[i] & 0x3) - 1;\n      dy = ((anchors[i] >>> 0x2) & 0x3) - 1;\n\n      isInside = (dx === 0 && dy === 0) || offsets[i] < 0;\n      sizeFactor = dx && dy ? Math.SQRT1_2 : 1;\n      insideFactor = offsets[i] < 0 ? -1 : 1;\n\n      x1 = boundary[1 + dx] + offsets[i] * dx * sizeFactor;\n      yc = boundary[4 + dy] + (insideFactor * textHeight * dy) / 2 + offsets[i] * dy * sizeFactor;\n      y1 = yc - textHeight / 2;\n      y2 = yc + textHeight / 2;\n\n      _x1 = $(x1);\n      _y1 = $(y1);\n      _y2 = $(y2);\n\n      if (!textWidth) {\n        // to avoid finding width of text label,\n        if (!test(_x1, _x1, _y1, _y2, bm0, bm1, x1, x1, y1, y2, boundary, isInside)) {\n          // skip this anchor/offset option if we fail to place a label with 1px width\n          continue;\n        } else {\n          // Otherwise, find the label width\n          textWidth = textMetrics.width(d.datum, d.datum.text);\n        }\n      }\n\n      xc = x1 + (insideFactor * textWidth * dx) / 2;\n      x1 = xc - textWidth / 2;\n      x2 = xc + textWidth / 2;\n\n      _x1 = $(x1);\n      _x2 = $(x2);\n\n      if (test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside)) {\n        // place label if the position is placeable\n        d.x = !dx ? xc : dx * insideFactor < 0 ? x2 : x1;\n        d.y = !dy ? yc : dy * insideFactor < 0 ? y2 : y1;\n\n        d.align = Aligns[dx * insideFactor + 1];\n        d.baseline = Baselines[dy * insideFactor + 1];\n\n        bm0.setRange(_x1, _y1, _x2, _y2);\n        return true;\n      }\n    }\n\n    return false;\n  };\n}\n\n// Test if a label with the given dimensions can be added without overlap\nfunction test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside) {\n  return !(\n    bm0.outOfBounds(_x1, _y1, _x2, _y2) ||\n    (isInside && bm1\n      ? bm1.getRange(_x1, _y1, _x2, _y2) || !isInMarkBound(x1, y1, x2, y2, boundary)\n      : bm0.getRange(_x1, _y1, _x2, _y2))\n  );\n}\n\nfunction isInMarkBound(x1, y1, x2, y2, boundary) {\n  return boundary[0] <= x1 && x2 <= boundary[2]\n      && boundary[3] <= y1 && y2 <= boundary[5];\n}\n","import {baseBitmaps, markBitmaps} from './util/markBitmaps';\nimport scaler from './util/scaler';\nimport placeAreaLabelNaive from './util/placeAreaLabel/placeNaive';\nimport placeAreaLabelReducedSearch from './util/placeAreaLabel/placeReducedSearch';\nimport placeAreaLabelFloodFill from './util/placeAreaLabel/placeFloodFill';\nimport placeMarkLabel from './util/placeMarkLabel';\n\n// 8-bit representation of anchors\nconst TOP    = 0x0,\n      MIDDLE = 0x4,\n      BOTTOM = 0x8,\n      LEFT   = 0x0,\n      CENTER = 0x1,\n      RIGHT  = 0x2;\n\n// Mapping from text anchor to number representation\nconst anchorCode = {\n  'top-left':     TOP + LEFT,\n  'top':          TOP + CENTER,\n  'top-right':    TOP + RIGHT,\n  'left':         MIDDLE + LEFT,\n  'middle':       MIDDLE + CENTER,\n  'right':        MIDDLE + RIGHT,\n  'bottom-left':  BOTTOM + LEFT,\n  'bottom':       BOTTOM + CENTER,\n  'bottom-right': BOTTOM + RIGHT\n};\n\nconst placeAreaLabel = {\n  'naive': placeAreaLabelNaive,\n  'reduced-search': placeAreaLabelReducedSearch,\n  'floodfill': placeAreaLabelFloodFill\n};\n\nexport default function(texts, size, compare, offset, anchor,\n  avoidMarks, avoidBaseMark, lineAnchor, markIndex, padding, method)\n{\n  // early exit for empty data\n  if (!texts.length) return texts;\n\n  const positions = Math.max(offset.length, anchor.length),\n        offsets = getOffsets(offset, positions),\n        anchors = getAnchors(anchor, positions),\n        marktype = markType(texts[0].datum),\n        grouptype = marktype === 'group' && texts[0].datum.items[markIndex].marktype,\n        isGroupArea = grouptype === 'area',\n        boundary = markBoundary(marktype, grouptype, lineAnchor, markIndex),\n        $ = scaler(size[0], size[1], padding),\n        isNaiveGroupArea = isGroupArea && method === 'naive';\n\n  // prepare text mark data for placing\n  const data = texts.map(d => ({\n    datum: d,\n    opacity: 0,\n    x: undefined,\n    y: undefined,\n    align: undefined,\n    baseline: undefined,\n    boundary: boundary(d)\n  }));\n\n  let bitmaps;\n  if (!isNaiveGroupArea) {\n    // sort labels in priority order, if comparator is provided\n    if (compare) {\n      data.sort((a, b) => compare(a.datum, b.datum));\n    }\n\n    // flag indicating if label can be placed inside its base mark\n    let labelInside = false;\n    for (let i=0; i < anchors.length && !labelInside; ++i) {\n      // label inside if anchor is at center\n      // label inside if offset to be inside the mark bound\n      labelInside = anchors[i] === 0x5 || offsets[i] < 0;\n    }\n\n    // extract data information from base mark when base mark is to be avoided\n    // base mark is implicitly avoided if it is a group area\n    if (marktype && (avoidBaseMark || isGroupArea)) {\n      avoidMarks = [texts.map(d => d.datum)].concat(avoidMarks);\n    }\n\n    // generate bitmaps for layout calculation\n    bitmaps = avoidMarks.length\n      ? markBitmaps($, avoidMarks, labelInside, isGroupArea)\n      : baseBitmaps($, avoidBaseMark && data);\n  }\n\n  // generate label placement function\n  const place = isGroupArea\n    ? placeAreaLabel[method]($, bitmaps, avoidBaseMark, markIndex)\n    : placeMarkLabel($, bitmaps, anchors, offsets);\n\n  // place all labels\n  data.forEach(d => d.opacity = +place(d));\n\n  return data;\n}\n\nfunction getOffsets(_, count) {\n  const offsets = new Float64Array(count),\n        n = _.length;\n  for (let i=0; i<n; ++i) offsets[i] = _[i] || 0;\n  for (let i=n; i<count; ++i) offsets[i] = offsets[n - 1];\n  return offsets;\n}\n\nfunction getAnchors(_, count) {\n  const anchors = new Int8Array(count),\n        n = _.length;\n  for (let i=0; i<n; ++i) anchors[i] |= anchorCode[_[i]];\n  for (let i=n; i<count; ++i) anchors[i] = anchors[n - 1];\n  return anchors;\n}\n\nfunction markType(item) {\n  return item && item.mark && item.mark.marktype;\n}\n\n/**\n * Factory function for function for getting base mark boundary, depending\n * on mark and group type. When mark type is undefined, line or area: boundary\n * is the coordinate of each data point. When base mark is grouped line,\n * boundary is either at the beginning or end of the line depending on the\n * value of lineAnchor. Otherwise, use bounds of base mark.\n */\nfunction markBoundary(marktype, grouptype, lineAnchor, markIndex) {\n  const xy = d => [d.x, d.x, d.x, d.y, d.y, d.y];\n\n  if (!marktype) {\n    return xy; // no reactive geometry\n  }\n\n  else if (marktype === 'line' || marktype === 'area') {\n    return d => xy(d.datum);\n  }\n\n  else if (grouptype === 'line') {\n    return d => {\n      const items = d.datum.items[markIndex].items;\n      return xy(items.length\n        ? items[lineAnchor === 'start' ? 0 : items.length - 1]\n        : {x: NaN, y: NaN});\n    };\n  }\n\n  else {\n    return d => {\n      const b = d.datum.bounds;\n      return [b.x1, (b.x1 + b.x2) / 2, b.x2, b.y1, (b.y1 + b.y2) / 2, b.y2];\n    };\n  }\n}\n","import {textMetrics} from 'vega-scenegraph';\n\nexport default function($, bitmaps, avoidBaseMark, markIndex) {\n  const width = $.width,\n      height = $.height;\n  \n  // try to place a label within an input area mark\n  return function(d) {\n    const items = d.datum.datum.items[markIndex].items, // area points\n          n = items.length, // number of points\n          textHeight = d.datum.fontSize, // label width\n          textWidth = textMetrics.width(d.datum, d.datum.text); // label height\n\n    let maxAreaWidth = 0,\n        x1, x2, y1, y2, x, y, areaWidth;\n\n    // for each area sample point\n    for (let i=0; i<n; ++i) {\n      x1 = items[i].x;\n      y1 = items[i].y;\n      x2 = items[i].x2 === undefined ? x1 : items[i].x2;\n      y2 = items[i].y2 === undefined ? y1 : items[i].y2;\n      x = (x1 + x2) / 2;\n      y = (y1 + y2) / 2;\n\n      areaWidth = Math.abs(x2 - x1 + y2 - y1);\n      if (areaWidth >= maxAreaWidth) {\n        maxAreaWidth = areaWidth;\n        d.x = x;\n        d.y = y;\n      }\n    }\n\n    x = textWidth / 2;\n    y = textHeight / 2;\n    x1 = d.x - x;\n    x2 = d.x + x;\n    y1 = d.y - y;\n    y2 = d.y + y;\n\n    d.align = 'center';\n    if (x1 < 0 && x2 <= width) {\n      d.align = 'left';\n    } else if (0 <= x1 && width < x2) {\n      d.align = 'right';\n    }\n\n    d.baseline = 'middle';\n    if (y1 < 0 && y2 <= height) {\n      d.baseline = 'top';\n    } else if (0 <= y1 && height < y2) {\n      d.baseline = 'bottom';\n    }\n\n    return true;\n  };\n}\n","import {textMetrics} from 'vega-scenegraph';\nimport {collision, outOfBounds} from './common';\n\nexport default function($, bitmaps, avoidBaseMark, markIndex) {\n  const width = $.width,\n      height = $.height,\n      bm0 = bitmaps[0], // where labels have been placed\n      bm1 = bitmaps[1]; // area outlines\n  \n  function tryLabel(_x, _y, maxSize, textWidth, textHeight) {\n    const x = $.invert(_x),\n          y = $.invert(_y);\n    let lo = maxSize,\n        hi = height,\n        mid;\n    if (\n      !outOfBounds(x, y, textWidth, textHeight, width, height) &&\n      !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) &&\n      !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)\n    ) {\n      // if the label fits at the current sample point,\n      // perform binary search to find the largest font size that fits\n      while (hi - lo >= 1) {\n        mid = (lo + hi) / 2;\n        if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) {\n          hi = mid;\n        } else {\n          lo = mid;\n        }\n      }\n      // place label if current lower bound exceeds prior max font size\n      if (lo > maxSize) {\n        return [x, y, lo, true];\n      }\n    }\n  }\n\n  // try to place a label within an input area mark\n  return function(d) {\n    const items = d.datum.datum.items[markIndex].items, // area points\n          n = items.length, // number of points\n          textHeight = d.datum.fontSize, // label width\n          textWidth = textMetrics.width(d.datum, d.datum.text); // label height\n\n    let maxSize = avoidBaseMark ? textHeight : 0,\n        labelPlaced = false,\n        labelPlaced2 = false,\n        maxAreaWidth = 0,\n        x1, x2, y1, y2, x, y, _x, _y, _x1, _xMid, _x2, _y1, _yMid, _y2, areaWidth, result, swapTmp;\n\n    // for each area sample point\n    for (let i=0; i<n; ++i) {\n      x1 = items[i].x;\n      y1 = items[i].y;\n      x2 = items[i].x2 === undefined ? x1 : items[i].x2;\n      y2 = items[i].y2 === undefined ? y1 : items[i].y2;\n\n      if (x1 > x2) {\n        swapTmp = x1;\n        x1 = x2;\n        x2 = swapTmp;\n      }\n\n      if (y1 > y2) {\n        swapTmp = y1;\n        y1 = y2;\n        y2 = swapTmp;\n      }\n\n      _x1 = $(x1);\n      _x2 = $(x2);\n      _xMid = ~~((_x1 + _x2) / 2);\n      _y1 = $(y1);\n      _y2 = $(y2);\n      _yMid = ~~((_y1 + _y2) / 2);\n\n      // search along the line from mid point between the 2 border to lower border\n      for (_x = _xMid; _x >= _x1; --_x) {\n        for (_y = _yMid; _y >= _y1; --_y) {\n          result = tryLabel(_x, _y, maxSize, textWidth, textHeight);\n          if (result) {\n            [d.x, d.y, maxSize, labelPlaced] = result;\n          }\n        }\n      }\n\n      // search along the line from mid point between the 2 border to upper border\n      for (_x = _xMid; _x <= _x2; ++_x) {\n        for (_y = _yMid; _y <= _y2; ++_y) {\n          result = tryLabel(_x, _y, maxSize, textWidth, textHeight);\n          if (result) {\n            [d.x, d.y, maxSize, labelPlaced] = result;\n          }\n        }\n      }\n\n      // place label at slice center if not placed through other means\n      // and if we're not avoiding overlap with other areas\n      if (!labelPlaced && !avoidBaseMark) {\n        // one span is zero, hence we can add\n        areaWidth = Math.abs(x2 - x1 + y2 - y1);\n        x = (x1 + x2) / 2;\n        y = (y1 + y2) / 2;\n\n        // place label if it fits and improves the max area width\n        if (\n          areaWidth >= maxAreaWidth &&\n          !outOfBounds(x, y, textWidth, textHeight, width, height) &&\n          !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)\n        ) {\n          maxAreaWidth = areaWidth;\n          d.x = x;\n          d.y = y;\n          labelPlaced2 = true;\n        }\n      }\n    }\n\n    // record current label placement information, update label bitmap\n    if (labelPlaced || labelPlaced2) {\n      x = textWidth / 2;\n      y = textHeight / 2;\n      bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));\n      d.align = 'center';\n      d.baseline = 'middle';\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n","import labelLayout from './LabelLayout';\nimport {Transform} from 'vega-dataflow';\nimport {array, error, inherits, isFunction} from 'vega-util';\n\nconst Output = [\n  'x',\n  'y',\n  'opacity',\n  'align',\n  'baseline'\n];\n\nconst Anchors = [\n  'top-left',\n  'left',\n  'bottom-left',\n  'top',\n  'bottom',\n  'top-right',\n  'right',\n  'bottom-right'\n];\n\n/**\n * Compute text label layout to annotate marks.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<number>} params.size - The size of the layout, provided as a [width, height] array.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for sorting label data in priority order.\n * @param {Array<string>} [params.anchor] - Label anchor points relative to the base mark bounding box.\n *   The available options are 'top-left', 'left', 'bottom-left', 'top',\n *   'bottom', 'top-right', 'right', 'bottom-right', 'middle'.\n * @param {Array<number>} [params.offset] - Label offsets (in pixels) from the base mark bounding box.\n *   This parameter  is parallel to the list of anchor points.\n * @param {number} [params.padding=0] - The amount (in pixels) that a label may exceed the layout size.\n * @param {string} [params.lineAnchor='end'] - For group line mark labels only, indicates the anchor\n *   position for labels. One of 'start' or 'end'.\n * @param {string} [params.markIndex=0] - For group mark labels only, an index indicating\n *   which mark within the group should be labeled.\n * @param {Array<number>} [params.avoidMarks] - A list of additional mark names for which the label\n *   layout should avoid overlap.\n * @param {boolean} [params.avoidBaseMark=true] - Boolean flag indicating if labels should avoid\n *   overlap with the underlying base mark being labeled.\n * @param {string} [params.method='naive'] - For area make labels only, a method for\n *   place labels. One of 'naive', 'reduced-search', or 'floodfill'.\n * @param {Array<string>} [params.as] - The output fields written by the transform.\n *   The default is ['x', 'y', 'opacity', 'align', 'baseline'].\n */\nexport default function Label(params) {\n  Transform.call(this, null, params);\n}\n\nLabel.Definition = {\n  type: 'Label',\n  metadata: { modifies: true },\n  params: [\n    { name: 'size', type: 'number', array: true, length: 2, required: true },\n    { name: 'sort', type: 'compare' },\n    { name: 'anchor', type: 'string', array: true, default: Anchors },\n    { name: 'offset', type: 'number', array: true, default: [1] },\n    { name: 'padding', type: 'number', default: 0 },\n    { name: 'lineAnchor', type: 'string', values: ['start', 'end'], default: 'end' },\n    { name: 'markIndex', type: 'number', default: 0 },\n    { name: 'avoidBaseMark', type: 'boolean', default: true },\n    { name: 'avoidMarks', type: 'data', array: true },\n    { name: 'method', type: 'string', default: 'naive'},\n    { name: 'as', type: 'string', array: true, length: Output.length, default: Output }\n  ]\n};\n\ninherits(Label, Transform, {\n  transform(_, pulse) {\n    function modp(param) {\n      const p = _[param];\n      return isFunction(p) && pulse.modified(p.fields);\n    }\n\n    const mod = _.modified();\n    if (!(mod || pulse.changed(pulse.ADD_REM) || modp('sort'))) return;\n    if (!_.size || _.size.length !== 2) {\n      error('Size parameter should be specified as a [width, height] array.');\n    }\n\n    const as = _.as || Output;\n\n    // run label layout\n    labelLayout(\n      pulse.materialize(pulse.SOURCE).source,\n      _.size,\n      _.sort,\n      array(_.offset || 1),\n      array(_.anchor || Anchors),\n      _.avoidMarks || [],\n      _.avoidBaseMark === false ? false : true,\n      _.lineAnchor || 'end',\n      _.markIndex || 0,\n      _.padding || 0,\n      _.method || 'naive'\n    ).forEach(l => {\n      // write layout results to data stream\n      const t = l.datum;\n      t[as[0]] = l.x;\n      t[as[1]] = l.y;\n      t[as[2]] = l.opacity;\n      t[as[3]] = l.align;\n      t[as[4]] = l.baseline;\n    });\n\n    return pulse.reflow(mod).modifies(as);\n  }\n});\n"],"names":["markBitmaps","$","avoidMarks","labelInside","isGroupArea","width","height","border","context","canvas","getContext","forEach","items","draw","buffer","Uint32Array","getImageData","data","layer1","bitmap","layer2","x","y","u","v","alpha","set","interior","length","type","mark","marktype","group","Marks","map","prepare","source","item","rederive","stroke","strokeOpacity","fill","fillOpacity","strokeWidth","MOD","RIGHT0","SIZE","RIGHT1","i","padding","ratio","Math","max","sqrt","w","h","scale","_","invert","array","_set","index","mask","_clear","get","clear","getRange","x2","y2","start","end","indexStart","indexEnd","r","setRange","clearRange","outOfBounds","Bitmap","textWidth","textHeight","collision","bm0","bm1","x1","y1","X_DIR","Y_DIR","Aligns","Baselines","test","_x1","_x2","_y1","_y2","boundary","isInside","isInMarkBound","anchorCode","TOP","MIDDLE","BOTTOM","placeAreaLabel","bitmaps","avoidBaseMark","markIndex","d","datum","n","fontSize","textMetrics","text","areaWidth","maxAreaWidth","undefined","abs","align","baseline","tryLabel","_x","_y","maxSize","mid","lo","hi","_xMid","_yMid","result","swapTmp","labelPlaced","labelPlaced2","bm2","stack","push","pop","j","texts","size","compare","offset","anchor","lineAnchor","method","positions","offsets","count","Float64Array","getOffsets","anchors","Int8Array","getAnchors","grouptype","xy","NaN","b","bounds","markBoundary","scaler","isNaiveGroupArea","opacity","sort","a","concat","baseBitmaps","place","dx","dy","sizeFactor","insideFactor","xc","yc","SQRT1_2","placeMarkLabel","Output","Anchors","Label","params","Transform","call","this","Definition","metadata","modifies","name","required","default","values","transform","pulse","mod","modified","changed","ADD_REM","param","p","isFunction","fields","modp","error","as","labelLayout","materialize","SOURCE","l","t","reflow"],"mappings":"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"}