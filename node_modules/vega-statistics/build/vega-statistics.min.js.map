{"version":3,"file":"vega-statistics.min.js","sources":["../src/numbers.js","../../../node_modules/d3-array/src/ascending.js","../../../node_modules/d3-array/src/number.js","../../../node_modules/d3-array/src/max.js","../../../node_modules/d3-array/src/min.js","../../../node_modules/d3-array/src/quickselect.js","../../../node_modules/d3-array/src/quantile.js","../src/quantiles.js","../src/quartiles.js","../src/bandwidth.js","../../../node_modules/d3-array/src/deviation.js","../../../node_modules/d3-array/src/variance.js","../src/random.js","../src/constants.js","../src/normal.js","../src/lognormal.js","../src/uniform.js","../src/regression/ols.js","../src/regression/points.js","../src/regression/r-squared.js","../src/regression/linear.js","../src/regression/quad.js","../src/regression/poly.js","../src/regression/loess.js","../src/sampleCurve.js","../src/bin.js","../src/bootstrapCI.js","../src/dotbin.js","../src/integer.js","../src/kde.js","../src/lcg.js","../src/mixture.js","../src/regression/exp.js","../../../node_modules/d3-array/src/median.js","../src/regression/log.js","../src/regression/pow.js"],"sourcesContent":["export default function*(values, valueof) {\n  if (valueof == null) {\n    for (let value of values) {\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      value = valueof(value, ++index, values);\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export default function(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","import ascending from \"./ascending.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n","import max from \"./max.js\";\nimport min from \"./min.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","import numbers from './numbers';\nimport {ascending, quantileSorted} from 'd3-array';\n\nexport default function(array, p, f) {\n  const values = Float64Array.from(numbers(array, f));\n\n  // don't depend on return value from typed array sort call\n  // protects against undefined sort results in Safari (vega/vega-lite#4964)\n  values.sort(ascending);\n\n  return p.map(_ => quantileSorted(values, _));\n}\n","import quantiles from './quantiles';\n\nexport default function(array, f) {\n  return quantiles(array, [0.25, 0.50, 0.75], f);\n}\n","import quartiles from './quartiles';\nimport {deviation} from 'd3-array';\n\n// Scott, D. W. (1992) Multivariate Density Estimation:\n// Theory, Practice, and Visualization. Wiley.\nexport default function(array, f) {\n  const n = array.length,\n        d = deviation(array, f),\n        q = quartiles(array, f),\n        h = (q[2] - q[0]) / 1.34,\n        v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n  return 1.06 * v * Math.pow(n, -0.2);\n}\n","import variance from \"./variance.js\";\n\nexport default function deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n","export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n","export var random = Math.random;\n\nexport function setRandom(r) {\n  random = r;\n}\n","export const SQRT2PI = Math.sqrt(2 * Math.PI);\nexport const SQRT2 = Math.SQRT2;","import {SQRT2, SQRT2PI} from './constants';\nimport {random} from './random';\n\nlet nextSample = NaN;\n\nexport function sampleNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  let x = 0, y = 0, rds, c;\n  if (nextSample === nextSample) {\n    x = nextSample;\n    nextSample = NaN;\n  } else {\n    do {\n      x = random() * 2 - 1;\n      y = random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n    x *= c;\n    nextSample = y * c;\n  }\n  return mean + x * stdev;\n}\n\nexport function densityNormal(value, mean, stdev) {\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - (mean || 0)) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n}\n\n// Approximation from West (2009)\n// Better Approximations to Cumulative Normal Functions\nexport function cumulativeNormal(value, mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  const z = (value - mean) / stdev,\n        Z = Math.abs(z);\n  let cd;\n\n  if (Z > 37) {\n    cd = 0;\n  } else {\n    const exp = Math.exp(-Z * Z / 2);\n    let sum;\n    if (Z < 7.07106781186547) {\n      sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n      sum = sum * Z + 6.37396220353165;\n      sum = sum * Z + 33.912866078383;\n      sum = sum * Z + 112.079291497871;\n      sum = sum * Z + 221.213596169931;\n      sum = sum * Z + 220.206867912376;\n      cd = exp * sum;\n      sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n      sum = sum * Z + 16.064177579207;\n      sum = sum * Z + 86.7807322029461;\n      sum = sum * Z + 296.564248779674;\n      sum = sum * Z + 637.333633378831;\n      sum = sum * Z + 793.826512519948;\n      sum = sum * Z + 440.413735824752;\n      cd = cd / sum;\n    } else {\n      sum = Z + 0.65;\n      sum = Z + 4 / sum;\n      sum = Z + 3 / sum;\n      sum = Z + 2 / sum;\n      sum = Z + 1 / sum;\n      cd = exp / sum / 2.506628274631;\n    }\n  }\n  return z > 0 ? 1 - cd : cd;\n}\n\n// Approximation of Probit function using inverse error function.\nexport function quantileNormal(p, mean, stdev) {\n  if (p < 0 || p > 1) return NaN;\n  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n}\n\n// Approximate inverse error function. Implementation from \"Approximating\n// the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\nfunction erfinv(x) {\n  // beware that the logarithm argument must be\n  // commputed as (1.0 - x) * (1.0 + x),\n  // it must NOT be simplified as 1.0 - x * x as this\n  // would induce rounding errors near the boundaries +/-1\n  let w = - Math.log((1 - x) * (1 + x)), p;\n\n  if (w < 6.25) {\n      w -= 3.125;\n      p =  -3.6444120640178196996e-21;\n      p =   -1.685059138182016589e-19 + p * w;\n      p =   1.2858480715256400167e-18 + p * w;\n      p =    1.115787767802518096e-17 + p * w;\n      p =   -1.333171662854620906e-16 + p * w;\n      p =   2.0972767875968561637e-17 + p * w;\n      p =   6.6376381343583238325e-15 + p * w;\n      p =  -4.0545662729752068639e-14 + p * w;\n      p =  -8.1519341976054721522e-14 + p * w;\n      p =   2.6335093153082322977e-12 + p * w;\n      p =  -1.2975133253453532498e-11 + p * w;\n      p =  -5.4154120542946279317e-11 + p * w;\n      p =    1.051212273321532285e-09 + p * w;\n      p =  -4.1126339803469836976e-09 + p * w;\n      p =  -2.9070369957882005086e-08 + p * w;\n      p =   4.2347877827932403518e-07 + p * w;\n      p =  -1.3654692000834678645e-06 + p * w;\n      p =  -1.3882523362786468719e-05 + p * w;\n      p =    0.0001867342080340571352 + p * w;\n      p =  -0.00074070253416626697512 + p * w;\n      p =   -0.0060336708714301490533 + p * w;\n      p =      0.24015818242558961693 + p * w;\n      p =       1.6536545626831027356 + p * w;\n  } else if (w < 16.0) {\n      w = Math.sqrt(w) - 3.25;\n      p =   2.2137376921775787049e-09;\n      p =   9.0756561938885390979e-08 + p * w;\n      p =  -2.7517406297064545428e-07 + p * w;\n      p =   1.8239629214389227755e-08 + p * w;\n      p =   1.5027403968909827627e-06 + p * w;\n      p =   -4.013867526981545969e-06 + p * w;\n      p =   2.9234449089955446044e-06 + p * w;\n      p =   1.2475304481671778723e-05 + p * w;\n      p =  -4.7318229009055733981e-05 + p * w;\n      p =   6.8284851459573175448e-05 + p * w;\n      p =   2.4031110387097893999e-05 + p * w;\n      p =   -0.0003550375203628474796 + p * w;\n      p =   0.00095328937973738049703 + p * w;\n      p =   -0.0016882755560235047313 + p * w;\n      p =    0.0024914420961078508066 + p * w;\n      p =   -0.0037512085075692412107 + p * w;\n      p =     0.005370914553590063617 + p * w;\n      p =       1.0052589676941592334 + p * w;\n      p =       3.0838856104922207635 + p * w;\n  } else if (Number.isFinite(w)) {\n      w = Math.sqrt(w) - 5.0;\n      p =  -2.7109920616438573243e-11;\n      p =  -2.5556418169965252055e-10 + p * w;\n      p =   1.5076572693500548083e-09 + p * w;\n      p =  -3.7894654401267369937e-09 + p * w;\n      p =   7.6157012080783393804e-09 + p * w;\n      p =  -1.4960026627149240478e-08 + p * w;\n      p =   2.9147953450901080826e-08 + p * w;\n      p =  -6.7711997758452339498e-08 + p * w;\n      p =   2.2900482228026654717e-07 + p * w;\n      p =  -9.9298272942317002539e-07 + p * w;\n      p =   4.5260625972231537039e-06 + p * w;\n      p =  -1.9681778105531670567e-05 + p * w;\n      p =   7.5995277030017761139e-05 + p * w;\n      p =  -0.00021503011930044477347 + p * w;\n      p =  -0.00013871931833623122026 + p * w;\n      p =       1.0103004648645343977 + p * w;\n      p =       4.8499064014085844221 + p * w;\n  } else {\n      p = Infinity;\n  }\n\n  return p * x;\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleNormal(mu, sigma),\n    pdf: value => densityNormal(value, mu, sigma),\n    cdf: value => cumulativeNormal(value, mu, sigma),\n    icdf: p => quantileNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n","import {cumulativeNormal, quantileNormal, sampleNormal} from './normal';\nimport {SQRT2PI} from './constants';\n\nexport function sampleLogNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  return Math.exp(mean + sampleNormal() * stdev);\n}\n\nexport function densityLogNormal(value, mean, stdev) {\n  if (value <= 0) return 0;\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (Math.log(value) - mean) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n}\n\nexport function cumulativeLogNormal(value, mean, stdev) {\n  return cumulativeNormal(Math.log(value), mean, stdev);\n}\n\nexport function quantileLogNormal(p, mean, stdev) {\n  return Math.exp(quantileNormal(p, mean, stdev));\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleLogNormal(mu, sigma),\n    pdf: value => densityLogNormal(value, mu, sigma),\n    cdf: value => cumulativeLogNormal(value, mu, sigma),\n    icdf: p => quantileLogNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n","import {random} from './random';\n\nexport function sampleUniform(min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return min + (max - min) * random();\n}\n\nexport function densityUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (value >= min && value <= max) ? 1 / (max - min) : 0;\n}\n\nexport function cumulativeUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n}\n\nexport function quantileUniform(p, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\n}\n\nexport default function(min, max) {\n  let a, b;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample: () => sampleUniform(a, b),\n    pdf: value => densityUniform(value, a, b),\n    cdf: value => cumulativeUniform(value, a, b),\n    icdf: p => quantileUniform(p, a, b)\n  };\n\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return dist.min(min).max(max);\n}\n","// Ordinary Least Squares\nexport default function(uX, uY, uXY, uX2) {\n  const delta = uX2 - uX * uX,\n        slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n        intercept = uY - slope * uX;\n\n  return [intercept, slope];\n}\n","export function points(data, x, y, sort) {\n  data = data.filter(d => {\n    let u = x(d), v = y(d);\n    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n  });\n\n  if (sort) {\n    data.sort((a, b) => x(a) - x(b));\n  }\n\n  const n = data.length,\n        X = new Float64Array(n),\n        Y = new Float64Array(n);\n\n  // extract values, calculate means\n  let i = 0, ux = 0, uy = 0, xv, yv, d;\n  for (d of data) {\n    X[i] = xv = +x(d);\n    Y[i] = yv = +y(d);\n    ++i;\n    ux += (xv - ux) / i;\n    uy += (yv - uy) / i;\n  }\n\n  // mean center the data\n  for (i=0; i<n; ++i) {\n    X[i] -= ux;\n    Y[i] -= uy;\n  }\n\n  return [X, Y, ux, uy];\n}\n\nexport function visitPoints(data, x, y, callback) {\n  let i = -1, u, v;\n\n  for (const d of data) {\n    u = x(d);\n    v = y(d);\n    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n      callback(u, v, ++i);\n    }\n  }\n}\n","import {visitPoints} from './points';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y, uY, predict) {\n  let SSE = 0, SST = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const sse = dy - predict(dx),\n          sst = dy - uY;\n\n    SSE += sse * sse;\n    SST += sst * sst;\n  });\n\n  return 1 - SSE / SST;\n}\n","import ols from './ols';\nimport {visitPoints} from './points';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * x;\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n","import {points} from './points';\nimport rSquared from './r-squared';\n\nexport default function(data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length;\n\n  let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0,\n      i, dx, dy, x2;\n\n  for (i=0; i<n;) {\n    dx = xv[i];\n    dy = yv[i++];\n    x2 = dx * dx;\n    X2 += (x2 - X2) / i;\n    X3 += (x2 * dx - X3) / i;\n    X4 += (x2 * x2 - X4) / i;\n    XY += (dx * dy - XY) / i;\n    X2Y += (x2 * dy - X2Y) / i;\n  }\n\n  const X2X2 = X4 - (X2 * X2),\n        d = (X2 * X2X2 - X3 * X3),\n        a = (X2Y * X2 - XY * X3) / d,\n        b = (XY * X2X2 - X2Y * X3) / d,\n        c = -a * X2,\n        predict = x => {\n          x = x - ux;\n          return a * x * x + b * x + c + uy;\n        };\n\n  // transform coefficients back from mean-centered space\n  return {\n    coef: [\n      c - b * ux + a * ux * ux + uy,\n      b - 2 * a * ux,\n      a\n    ],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n","import linear from './linear';\nimport {points} from './points';\nimport quad from './quad';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\nexport default function(data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n\n  let i, j, l, v, c;\n\n  for (i=0; i<k; ++i) {\n    for (l=0, v=0; l<n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n    lhs.push(v);\n\n    c = new Float64Array(k);\n    for (j=0; j<k; ++j) {\n      for (l=0, v=0; l<n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n      c[j] = v;\n    }\n    rhs.push(c);\n  }\n  rhs.push(lhs);\n\n  const coef = gaussianElimination(rhs),\n        predict = x => {\n          x -= ux;\n          let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n          for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\n          return y;\n        };\n\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i=0; i<k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i=k-1; i>=0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j=1; j<=i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i-j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}","import ols from './ols';\nimport {points} from './points';\nimport {median} from 'd3-array';\n\nconst maxiters = 2,\n      epsilon = 1e-12;\n\n// Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\nexport default function(data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n        n = xv.length,\n        bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n        yhat = new Float64Array(n),\n        residuals = new Float64Array(n),\n        robustWeights = new Float64Array(n).fill(1);\n\n  for (let iter = -1; ++iter <= maxiters; ) {\n    const interval = [0, bw - 1];\n\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n            i0 = interval[0],\n            i1 = interval[1],\n            edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n      let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;\n      const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n              yk = yv[k],\n              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n              xkw = xk * w;\n\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      }\n\n      // linear regression fit\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n      updateInterval(xv, i + 1, interval);\n    }\n\n    if (iter === maxiters) {\n      break;\n    }\n\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n\n    for (let i = 0, arg, w; i < n; ++i){\n      arg = residuals[i] / (6 * medianResidual);\n      // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n      robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n    }\n  }\n\n  return output(xv, yhat, ux, uy);\n}\n\n// weighting kernel for local regression\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n}\n\n// advance sliding window interval of nearest neighbors\nfunction updateInterval(xv, i, interval) {\n  const val = xv[i];\n  let left = interval[0],\n      right = interval[1] + 1;\n\n  if (right >= xv.length) return;\n\n  // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n  while (i > left && (xv[right] - val) <= (val - xv[left])) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n}\n\n// generate smoothed output points\n// average points with repeated x values\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length, out = [];\n  let i = 0, cnt = 0, prev = [], v;\n\n  for (; i<n; ++i) {\n    v = xv[i] + ux;\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / (++cnt);\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n  prev[1] += uy;\n\n  return out;\n}\n","// subdivide up to accuracy of 0.1 degrees\nconst MIN_RADIANS = 0.1 * Math.PI / 180;\n\n// Adaptively sample an interpolated function over a domain extent\nexport default function(f, extent, minSteps, maxSteps) {\n  minSteps = minSteps || 25;\n  maxSteps = Math.max(minSteps, maxSteps || 200);\n\n  const point = x => [x, f(x)],\n        minX = extent[0],\n        maxX = extent[1],\n        span = maxX - minX,\n        stop = span / maxSteps,\n        prev = [point(minX)],\n        next = [];\n\n  if (minSteps === maxSteps) {\n    // no adaptation, sample uniform grid directly and return\n    for (let i = 1; i < maxSteps; ++i) {\n      prev.push(point(minX + (i / minSteps) * span));\n    }\n    prev.push(point(maxX));\n    return prev;\n  } else {\n    // sample minimum points on uniform grid\n    // then move on to perform adaptive refinement\n    next.push(point(maxX));\n    for (let i = minSteps; --i > 0;) {\n      next.push(point(minX + (i / minSteps) * span));\n    }\n  }\n\n  let p0 = prev[0],\n      p1 = next[next.length - 1];\n\n  while (p1) {\n    // midpoint for potential curve subdivision\n    const pm = point((p0[0] + p1[0]) / 2);\n\n    if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {\n      // maximum resolution has not yet been met, and\n      // subdivision midpoint sufficiently different from endpoint\n      // save subdivision, push midpoint onto the visitation stack\n      next.push(pm);\n    } else {\n      // subdivision midpoint sufficiently similar to endpoint\n      // skip subdivision, store endpoint, move to next point on the stack\n      p0 = p1;\n      prev.push(p1);\n      next.pop();\n    }\n    p1 = next[next.length - 1];\n  }\n\n  return prev;\n}\n\nfunction angleDelta(p, q, r) {\n  const a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),\n        a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);\n  return Math.abs(a0 - a1);\n}\n","export default function(_) {\n  // determine range\n  const maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div  = _.divide || [5, 2];\n\n  let min  = _.extent[0],\n      max  = _.extent[1],\n      step, level, minstep, v, i, n;\n\n  const span = _.span || (max - min) || Math.abs(min) || 1;\n\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n    for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n    step = _.steps[Math.max(0, i-1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n\n    // increase step size if too many bins\n    while (Math.ceil(span/step) > maxb) { step *= base; }\n\n    // decrease step size if allowed\n    for (i=0, n=div.length; i<n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n        eps = Math.pow(base, -precision - 1);\n  if (_.nice || _.nice === undefined) {\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n\n  return {\n    start: min,\n    stop:  max === min ? min + step : max,\n    step:  step\n  };\n}\n","import numbers from './numbers';\nimport {random} from './random';\nimport {ascending, quantile} from 'd3-array';\n\nexport default function(array, samples, alpha, f) {\n  if (!array.length) return [undefined, undefined];\n\n  const values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples;\n  let a, i, j, mu;\n\n  for (j=0, mu=Array(m); j<m; ++j) {\n    for (a=0, i=0; i<n; ++i) {\n      a += values[~~(random() * n)];\n    }\n    mu[j] = a / n;\n  }\n\n  mu.sort(ascending);\n\n  return [\n    quantile(mu, alpha/2),\n    quantile(mu, 1-(alpha/2))\n  ];\n}\n","// Dot density binning for dot plot construction.\n// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\nexport default function(array, step, smooth, f) {\n  f = f || (_ => _);\n\n  const n = array.length,\n        v = new Float64Array(n);\n\n  let i = 0, j = 1,\n      a = f(array[0]),\n      b = a,\n      w = a + step,\n      x;\n\n  for (; j<n; ++j) {\n    x = f(array[j]);\n    if (x >= w) {\n      b = (a + b) / 2;\n      for (; i<j; ++i) v[i] = b;\n      w = x + step;\n      a = x;\n    }\n    b = x;\n  }\n\n  b = (a + b) / 2;\n  for (; i<j; ++i) v[i] = b;\n\n  return smooth ? smoothing(v, step + step / 4) : v;\n}\n\n// perform smoothing to reduce variance\n// swap points between \"adjacent\" stacks\n// Wilkinson defines adjacent as within step/4 units\nfunction smoothing(v, thresh) {\n  const n = v.length;\n  let a = 0,\n      b = 1,\n      c, d;\n\n  // get left stack\n  while (v[a] === v[b]) ++b;\n\n  while (b < n) {\n    // get right stack\n    c = b + 1;\n    while (v[b] === v[c]) ++c;\n\n    // are stacks adjacent?\n    // if so, compare sizes and swap as needed\n    if (v[b] - v[b-1] < thresh) {\n      d = b + ((a + c - b - b) >> 1);\n      while (d < b) v[d++] = v[b];\n      while (d > b) v[d--] = v[a];\n    }\n\n    // update left stack indices\n    a = b;\n    b = c;\n  }\n\n  return v;\n}\n","import {random} from './random';\n\nexport default function(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n\n  let a, b, d;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample() {\n      return a + Math.floor(d * random());\n    },\n    pdf(x) {\n      return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n    },\n    cdf(x) {\n      const v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    },\n    icdf(p) {\n      return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n    }\n  };\n\n  return dist.min(min).max(max);\n}\n","import estimateBandwidth from './bandwidth';\nimport gaussian from './normal';\nimport {random} from './random';\n\nexport default function(support, bandwidth) {\n  const kernel = gaussian();\n  let n = 0;\n\n  const dist = {\n    data(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    },\n\n    bandwidth(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    },\n\n    sample() {\n      return support[~~(random() * n)] + bandwidth * kernel.sample();\n    },\n\n    pdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    },\n\n    cdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    },\n\n    icdf() {\n      throw Error('KDE icdf not supported.');\n    }\n  };\n\n  return dist.data(support);\n}\n","export default function(seed) {\n  // Random numbers using a Linear Congruential Generator with seed value\n  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return function() {\n    seed = (1103515245 * seed + 12345) % 2147483647;\n    return seed / 2147483647;\n  };\n}\n","import {random} from './random';\n\nexport default function(dists, weights) {\n  let m = 0, w;\n\n  function normalize(x) {\n    const w = [];\n    let sum = 0, i;\n    for (i = 0; i < m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n    for (i = 0; i < m; ++i) { w[i] /= sum; }\n    return w;\n  }\n\n  const dist = {\n    weights(_) {\n      if (arguments.length) {\n        w = normalize(weights = (_ || []));\n        return dist;\n      }\n      return weights;\n    },\n\n    distributions(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    },\n\n    sample() {\n      const r = random();\n      let d = dists[m-1],\n          v = w[0],\n          i = 0;\n\n      // first select distribution\n      for (; i<m-1; v += w[++i]) {\n        if (r < v) { d = dists[i]; break; }\n      }\n      // then sample from it\n      return d.sample();\n    },\n\n    pdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    },\n\n    cdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    },\n\n    icdf() {\n      throw Error('Mixture icdf not supported.');\n    }\n  };\n\n  return dist.distributions(dists).weights(weights);\n}\n","import ols from './ols';\nimport {points, visitPoints} from './points';\nimport rSquared from './r-squared';\n\nexport default function(data, x, y) {\n  // eslint-disable-next-line no-unused-vars\n  const [xv, yv, ux, uy] = points(data, x, y);\n  let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;\n\n  visitPoints(data, x, y, (_, dy) => {\n    dx = xv[n++];\n    ly = Math.log(dy);\n    xy = dx * dy;\n\n    YL += (dy * ly - YL) / n;\n    XY += (xy - XY) / n;\n    XYL += (xy * ly - XYL) / n;\n    X2Y += (dx * xy - X2Y) / n;\n  });\n\n  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n        predict = x => Math.exp(c0 + c1 * (x - ux));\n\n  return {\n    coef: [Math.exp(c0 - c1 * ux), c1],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n","import quantile from \"./quantile.js\";\n\nexport default function(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n","import ols from './ols';\nimport {visitPoints} from './points';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    dx = Math.log(dx);\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * Math.log(x);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n","import ols from './ols';\nimport {visitPoints} from './points';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const lx = Math.log(dx),\n          ly = Math.log(dy);\n    ++n;\n    X += (lx - X) / n;\n    Y += (ly - Y) / n;\n    XY += (lx * ly - XY) / n;\n    X2 += (lx * lx - X2) / n;\n    YS += (dy - YS) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] * Math.pow(x, coef[1]);\n\n  coef[0] = Math.exp(coef[0]);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, YS, predict)\n  };\n}"],"names":["values","valueof","value","index","a","b","NaN","x","max","undefined","min","quickselect","array","k","left","right","length","compare","ascending","n","m","z","Math","log","s","exp","sd","sqrt","floor","t","i","j","swap","quantile","p","Float64Array","from","numbers","i0","value0","subarray","f","sort","map","_","number","quantileSorted","quantiles","d","v","delta","count","mean","sum","variance","deviation","q","quartiles","h","abs","pow","random","SQRT2PI","PI","SQRT2","nextSample","sampleNormal","stdev","rds","c","y","densityNormal","cumulativeNormal","Z","cd","quantileNormal","w","Number","isFinite","Infinity","erfinv","mu","sigma","dist","arguments","sample","pdf","cdf","icdf","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","sampleUniform","densityUniform","cumulativeUniform","quantileUniform","uX","uY","uXY","uX2","slope","points","data","filter","u","X","Y","xv","yv","ux","uy","visitPoints","callback","predict","SSE","SST","dx","dy","sse","sst","XY","X2","coef","ols","rSquared","x2","X3","X4","X2Y","X2X2","uncenter","Array","tricube","updateInterval","interval","val","MIN_RADIANS","angleDelta","r","a0","atan2","a1","maxb","maxbins","base","logb","div","divide","step","level","minstep","extent","span","steps","ceil","round","precision","eps","nice","start","stop","samples","alpha","smooth","thresh","smoothing","support","bandwidth","kernel","gaussian","estimateBandwidth","Error","seed","dists","weights","normalize","distributions","ly","xy","YL","XYL","c0","c1","bw","yhat","residuals","robustWeights","fill","iter","i1","edge","W","denom","xk","yk","xkw","medianResidual","median","arg","out","cnt","prev","push","output","order","linear","quad","lhs","rhs","l","matrix","gaussianElimination","YS","lx","minSteps","maxSteps","point","minX","maxX","next","p0","p1","pm","pop"],"mappings":"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"}