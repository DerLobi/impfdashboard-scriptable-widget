{"version":3,"file":"vega-transforms.min.js","sources":["../src/util/AggregateKeys.js","../src/util/AggregateOps.js","../src/util/TupleStore.js","../src/Aggregate.js","../src/Bin.js","../src/util/SortedList.js","../src/Collect.js","../src/Compare.js","../src/CountPattern.js","../src/Cross.js","../src/util/Distributions.js","../src/Density.js","../src/util/util.js","../src/DotBin.js","../src/Expression.js","../src/Extent.js","../src/Subflow.js","../src/Facet.js","../src/Field.js","../src/Filter.js","../src/Flatten.js","../src/Fold.js","../src/Formula.js","../src/Generate.js","../../../node_modules/d3-array/src/ascending.js","../../../node_modules/d3-array/src/bisector.js","../../../node_modules/d3-array/src/max.js","../../../node_modules/d3-array/src/min.js","../../../node_modules/d3-array/src/quickselect.js","../../../node_modules/d3-array/src/quantile.js","../../../node_modules/d3-array/src/number.js","../../../node_modules/d3-array/src/range.js","../src/Impute.js","../../../node_modules/d3-array/src/median.js","../../../node_modules/d3-array/src/mean.js","../src/JoinAggregate.js","../src/KDE.js","../src/Key.js","../src/Load.js","../src/Lookup.js","../src/MultiExtent.js","../src/MultiValues.js","../src/Params.js","../src/Pivot.js","../src/PreFacet.js","../src/Project.js","../src/Proxy.js","../src/Quantile.js","../src/Relay.js","../src/Sample.js","../src/Sequence.js","../src/Sieve.js","../src/TimeUnit.js","../src/TupleIndex.js","../src/Values.js","../src/util/WindowOps.js","../src/util/WindowState.js","../src/Window.js"],"sourcesContent":["export function multikey(f) {\n  return x => {\n    const n = f.length;\n    let i = 1,\n        k = String(f[0](x));\n\n    for (; i<n; ++i) {\n      k += '|' + f[i](x);\n    }\n\n    return k;\n  };\n}\n\nexport function groupkey(fields) {\n  return !fields || !fields.length ? function() { return ''; }\n    : fields.length === 1 ? fields[0]\n    : multikey(fields);\n}\n","import {extend, identity} from 'vega-util';\n\nexport function measureName(op, field, as) {\n  return as || (op + (!field ? '' : '_' + field));\n}\n\nconst noop = () => {};\n\nconst base_op = {\n  init: noop,\n  add:  noop,\n  rem:  noop,\n  idx:  0\n};\n\nexport const AggregateOps = {\n  values: {\n    init:  m => m.cell.store = true,\n    value: m => m.cell.data.values(),\n    idx:  -1\n  },\n  count: {\n    value: m => m.cell.num\n  },\n  __count__: {\n    value: m => m.missing + m.valid\n  },\n  missing: {\n    value: m => m.missing\n  },\n  valid: {\n    value: m => m.valid\n  },\n  sum: {\n    init:  m => m.sum = 0,\n    value: m => m.sum,\n    add:  (m, v) => m.sum += +v,\n    rem:  (m, v) => m.sum -= v\n  },\n  product: {\n    init:  m => m.product = 1,\n    value: m => m.valid ? m.product : undefined,\n    add:  (m, v) => m.product *= v,\n    rem:  (m, v) => m.product /= v\n  },\n  mean: {\n    init:  m => m.mean = 0,\n    value: m => m.valid ? m.mean : undefined,\n    add:  (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n    rem:  (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n  },\n  average: {\n    value: m => m.valid ? m.mean : undefined,\n    req:  ['mean'], idx: 1\n  },\n  variance: {\n    init:  m => m.dev = 0,\n    value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n    add:  (m, v) => m.dev += m.mean_d * (v - m.mean),\n    rem:  (m, v) => m.dev -= m.mean_d * (v - m.mean),\n    req:  ['mean'], idx: 1\n  },\n  variancep: {\n    value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n    req:  ['variance'], idx: 2\n  },\n  stdev: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n    req:  ['variance'], idx: 2\n  },\n  stdevp: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n    req:  ['variance'], idx: 2\n  },\n  stderr: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n    req:  ['variance'], idx: 2\n  },\n  distinct: {\n    value: m => m.cell.data.distinct(m.get),\n    req:  ['values'], idx: 3\n  },\n  ci0: {\n    value: m => m.cell.data.ci0(m.get),\n    req:  ['values'], idx: 3\n  },\n  ci1: {\n    value: m => m.cell.data.ci1(m.get),\n    req:  ['values'], idx: 3\n  },\n  median: {\n    value: m => m.cell.data.q2(m.get),\n    req:  ['values'], idx: 3\n  },\n  q1: {\n    value: m => m.cell.data.q1(m.get),\n    req: ['values'], idx: 3\n  },\n  q3: {\n    value: m => m.cell.data.q3(m.get),\n    req:  ['values'], idx: 3\n  },\n  min: {\n    init:  m => m.min = undefined,\n    value: m => m.min = (Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min),\n    add:  (m, v) => { if (v < m.min || m.min === undefined) m.min = v; },\n    rem:  (m, v) => { if (v <= m.min) m.min = NaN; },\n    req:  ['values'], idx: 4\n  },\n  max: {\n    init:  m => m.max = undefined,\n    value: m => m.max = (Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max),\n    add:  (m, v) => { if (v > m.max || m.max === undefined) m.max = v; },\n    rem:  (m, v) => { if (v >= m.max) m.max = NaN; },\n    req:  ['values'], idx: 4\n  },\n  argmin: {\n    init:  m => m.argmin = undefined,\n    value: m => m.argmin || m.cell.data.argmin(m.get),\n    add:  (m, v, t) => { if (v < m.min) m.argmin = t; },\n    rem:  (m, v) => { if (v <= m.min) m.argmin = undefined; },\n    req:  ['min', 'values'], idx: 3\n  },\n  argmax: {\n    init:  m => m.argmax = undefined,\n    value: m => m.argmax || m.cell.data.argmax(m.get),\n    add:  (m, v, t) => { if (v > m.max) m.argmax = t; },\n    rem:  (m, v) => { if (v >= m.max) m.argmax = undefined; },\n    req:  ['max', 'values'], idx: 3\n  }\n};\n\nexport const ValidAggregateOps = Object.keys(AggregateOps);\n\nfunction measure(key, value) {\n  return out => extend({\n    name: key,\n    out: out || key\n  }, base_op, value);\n}\n\nValidAggregateOps.forEach(key => {\n  AggregateOps[key] = measure(key, AggregateOps[key]);\n});\n\nexport function createMeasure(op, name) {\n  return AggregateOps[op](name);\n}\n\nfunction compareIndex(a, b) {\n  return a.idx - b.idx;\n}\n\nfunction resolve(agg) {\n  const map = {};\n  agg.forEach(a => map[a.name] = a);\n\n  const getreqs = a => {\n    if (!a.req) return;\n    a.req.forEach(key => {\n      if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n    });\n  };\n  agg.forEach(getreqs);\n\n  return Object.values(map).sort(compareIndex);\n}\n\nfunction init() {\n  this.valid = 0;\n  this.missing = 0;\n  this._ops.forEach(op => op.init(this));\n}\n\nfunction add(v, t) {\n  if (v == null || v === '') { ++this.missing; return; }\n  if (v !== v) return;\n  ++this.valid;\n  this._ops.forEach(op => op.add(this, v, t));\n}\n\nfunction rem(v, t) {\n  if (v == null || v === '') { --this.missing; return; }\n  if (v !== v) return;\n  --this.valid;\n  this._ops.forEach(op => op.rem(this, v, t));\n}\n\nfunction set(t) {\n  this._out.forEach(op => t[op.out] = op.value(this));\n  return t;\n}\n\nexport function compileMeasures(agg, field) {\n  const get = field || identity,\n        ops = resolve(agg),\n        out = agg.slice().sort(compareIndex);\n\n  function ctr(cell) {\n    this._ops = ops;\n    this._out = out;\n    this.cell = cell;\n    this.init();\n  }\n\n  ctr.prototype.init = init;\n  ctr.prototype.add = add;\n  ctr.prototype.rem = rem;\n  ctr.prototype.set = set;\n  ctr.prototype.get = get;\n  ctr.fields = agg.map(op => op.out);\n\n  return ctr;\n}\n","import {tupleid} from 'vega-dataflow';\nimport {bootstrapCI, quartiles} from 'vega-statistics';\nimport {extentIndex, field, hasOwnProperty} from 'vega-util';\n\nexport default function TupleStore(key) {\n  this._key = key ? field(key) : tupleid;\n  this.reset();\n}\n\nconst prototype = TupleStore.prototype;\n\nprototype.reset = function() {\n  this._add = [];\n  this._rem = [];\n  this._ext = null;\n  this._get = null;\n  this._q = null;\n};\n\nprototype.add = function(v) {\n  this._add.push(v);\n};\n\nprototype.rem = function(v) {\n  this._rem.push(v);\n};\n\nprototype.values = function() {\n  this._get = null;\n  if (this._rem.length === 0) return this._add;\n\n  const a = this._add,\n        r = this._rem,\n        k = this._key,\n        n = a.length,\n        m = r.length,\n        x = Array(n - m),\n        map = {};\n  let i, j, v;\n\n  // use unique key field to clear removed values\n  for (i=0; i<m; ++i) {\n    map[k(r[i])] = 1;\n  }\n  for (i=0, j=0; i<n; ++i) {\n    if (map[k(v = a[i])]) {\n      map[k(v)] = 0;\n    } else {\n      x[j++] = v;\n    }\n  }\n\n  this._rem = [];\n  return (this._add = x);\n};\n\n// memoizing statistics methods\n\nprototype.distinct = function(get) {\n  const v = this.values(),\n        map = {};\n\n  let n = v.length,\n      count = 0, s;\n\n  while (--n >= 0) {\n    s = get(v[n]) + '';\n    if (!hasOwnProperty(map, s)) {\n      map[s] = 1;\n      ++count;\n    }\n  }\n\n  return count;\n};\n\nprototype.extent = function(get) {\n  if (this._get !== get || !this._ext) {\n    const v = this.values(),\n          i = extentIndex(v, get);\n    this._ext = [v[i[0]], v[i[1]]];\n    this._get = get;\n  }\n  return this._ext;\n};\n\nprototype.argmin = function(get) {\n  return this.extent(get)[0] || {};\n};\n\nprototype.argmax = function(get) {\n  return this.extent(get)[1] || {};\n};\n\nprototype.min = function(get) {\n  const m = this.extent(get)[0];\n  return m != null ? get(m) : undefined;\n};\n\nprototype.max = function(get) {\n  const m = this.extent(get)[1];\n  return m != null ? get(m) : undefined;\n};\n\nprototype.quartile = function(get) {\n  if (this._get !== get || !this._q) {\n    this._q = quartiles(this.values(), get);\n    this._get = get;\n  }\n  return this._q;\n};\n\nprototype.q1 = function(get) {\n  return this.quartile(get)[0];\n};\n\nprototype.q2 = function(get) {\n  return this.quartile(get)[1];\n};\n\nprototype.q3 = function(get) {\n  return this.quartile(get)[2];\n};\n\nprototype.ci = function(get) {\n  if (this._get !== get || !this._ci) {\n    this._ci = bootstrapCI(this.values(), 1000, 0.05, get);\n    this._get = get;\n  }\n  return this._ci;\n};\n\nprototype.ci0 = function(get) {\n  return this.ci(get)[0];\n};\n\nprototype.ci1 = function(get) {\n  return this.ci(get)[1];\n};\n","import {groupkey} from './util/AggregateKeys';\nimport {ValidAggregateOps, compileMeasures, createMeasure, measureName} from './util/AggregateOps';\nimport TupleStore from './util/TupleStore';\nimport {Transform, ingest, replace} from 'vega-dataflow';\nimport {accessorFields, accessorName, array, error, inherits} from 'vega-util';\n\n/**\n * Group-by aggregation operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n * @param {boolean} [params.cross=false] - A flag indicating that the full\n *   cross-product of groupby values should be generated, including empty cells.\n *   If true, the drop parameter is ignored and empty cells are retained.\n * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n */\nexport default function Aggregate(params) {\n  Transform.call(this, null, params);\n\n  this._adds = []; // array of added output tuples\n  this._mods = []; // array of modified output tuples\n  this._alen = 0;  // number of active added tuples\n  this._mlen = 0;  // number of active modified tuples\n  this._drop = true;   // should empty aggregation cells be removed\n  this._cross = false; // produce full cross-product of group-by values\n\n  this._dims = [];   // group-by dimension accessors\n  this._dnames = []; // group-by dimension names\n\n  this._measures = []; // collection of aggregation monoids\n  this._countOnly = false; // flag indicating only count aggregation\n  this._counts = null; // collection of count fields\n  this._prev = null;   // previous aggregation cells\n\n  this._inputs = null;  // array of dependent input tuple field names\n  this._outputs = null; // array of output tuple field names\n}\n\nAggregate.Definition = {\n  'type': 'Aggregate',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n    { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n    { 'name': 'drop', 'type': 'boolean', 'default': true },\n    { 'name': 'cross', 'type': 'boolean', 'default': false },\n    { 'name': 'key', 'type': 'field' }\n  ]\n};\n\ninherits(Aggregate, Transform, {\n  transform(_, pulse) {\n    const aggr = this,\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          mod = _.modified();\n\n    aggr.stamp = out.stamp;\n\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      aggr._prev = aggr.value;\n      aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      aggr.value = aggr.value || aggr.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    }\n\n    // Indicate output fields and return aggregate tuples.\n    out.modifies(aggr._outputs);\n\n    // Should empty cells be dropped?\n    aggr._drop = _.drop !== false;\n\n    // If domain cross-product requested, generate empty cells as needed\n    // and ensure that empty cells are not dropped\n    if (_.cross && aggr._dims.length > 1) {\n      aggr._drop = false;\n      aggr.cross();\n    }\n\n    if (pulse.clean() && aggr._drop) {\n      out.clean(true).runAfter(() => this.clean());\n    }\n\n    return aggr.changes(out);\n  },\n\n  cross() {\n    const aggr = this,\n          curr = aggr.value,\n          dims = aggr._dnames,\n          vals = dims.map(() => ({})),\n          n = dims.length;\n\n    // collect all group-by domain values\n    function collect(cells) {\n      let key, i, t, v;\n      for (key in cells) {\n        t = cells[key].tuple;\n        for (i=0; i<n; ++i) {\n          vals[i][(v = t[dims[i]])] = v;\n        }\n      }\n    }\n    collect(aggr._prev);\n    collect(curr);\n\n    // iterate over key cross-product, create cells as needed\n    function generate(base, tuple, index) {\n      const name = dims[index],\n          v = vals[index++];\n\n      for (const k in v) {\n        const key = base ? base + '|' + k : k;\n        tuple[name] = v[k];\n        if (index < n) generate(key, tuple, index);\n        else if (!curr[key]) aggr.cell(key, tuple);\n      }\n    }\n    generate('', {}, 0);\n  },\n\n  init(_) {\n    // initialize input and output fields\n    const inputs = (this._inputs = []),\n          outputs = (this._outputs = []),\n          inputMap = {};\n\n    function inputVisit(get) {\n      const fields = array(accessorFields(get)),\n            n = fields.length;\n      let i = 0, f;\n      for (; i<n; ++i) {\n        if (!inputMap[f=fields[i]]) {\n          inputMap[f] = 1;\n          inputs.push(f);\n        }\n      }\n    }\n\n    // initialize group-by dimensions\n    this._dims = array(_.groupby);\n    this._dnames = this._dims.map(d => {\n      const dname = accessorName(d);\n      inputVisit(d);\n      outputs.push(dname);\n      return dname;\n    });\n    this.cellkey = _.key ? _.key : groupkey(this._dims);\n\n    // initialize aggregate measures\n    this._countOnly = true;\n    this._counts = [];\n    this._measures = [];\n\n    const fields = _.fields || [null],\n          ops = _.ops || ['count'],\n          as = _.as || [],\n          n = fields.length,\n          map = {};\n    let field, op, m, mname, outname, i;\n\n    if (n !== ops.length) {\n      error('Unmatched number of fields and aggregate ops.');\n    }\n\n    for (i=0; i<n; ++i) {\n      field = fields[i];\n      op = ops[i];\n\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n      mname = accessorName(field);\n      outname = measureName(op, mname, as[i]);\n      outputs.push(outname);\n\n      if (op === 'count') {\n        this._counts.push(outname);\n        continue;\n      }\n\n      m = map[mname];\n      if (!m) {\n        inputVisit(field);\n        m = (map[mname] = []);\n        m.field = field;\n        this._measures.push(m);\n      }\n\n      if (op !== 'count') this._countOnly = false;\n      m.push(createMeasure(op, outname));\n    }\n\n    this._measures = this._measures.map(m => compileMeasures(m, m.field));\n\n    return {}; // aggregation cells (this.value)\n  },\n\n  // -- Cell Management -----\n\n  cellkey: groupkey(),\n\n  cell(key, t) {\n    let cell = this.value[key];\n    if (!cell) {\n      cell = this.value[key] = this.newcell(key, t);\n      this._adds[this._alen++] = cell;\n    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._adds[this._alen++] = cell;\n    } else if (cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._mods[this._mlen++] = cell;\n    }\n    return cell;\n  },\n\n  newcell(key, t) {\n    const cell = {\n      key:   key,\n      num:   0,\n      agg:   null,\n      tuple: this.newtuple(t, this._prev && this._prev[key]),\n      stamp: this.stamp,\n      store: false\n    };\n\n    if (!this._countOnly) {\n      const measures = this._measures,\n            n = measures.length;\n\n      cell.agg = Array(n);\n      for (let i=0; i<n; ++i) {\n        cell.agg[i] = new measures[i](cell);\n      }\n    }\n\n    if (cell.store) {\n      cell.data = new TupleStore();\n    }\n\n    return cell;\n  },\n\n  newtuple(t, p) {\n    const names = this._dnames,\n          dims = this._dims,\n          n = dims.length,\n          x = {};\n\n    for (let i=0; i<n; ++i) {\n      x[names[i]] = dims[i](t);\n    }\n\n    return p ? replace(p.tuple, x) : ingest(x);\n  },\n\n  clean() {\n    const cells = this.value;\n    for (const key in cells) {\n      if (cells[key].num === 0) {\n        delete cells[key];\n      }\n    }\n  },\n\n  // -- Process Tuples -----\n\n  add(t) {\n    const key = this.cellkey(t),\n          cell = this.cell(key, t);\n\n    cell.num += 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.add(t);\n\n    const agg = cell.agg;\n    for (let i=0, n=agg.length; i<n; ++i) {\n      agg[i].add(agg[i].get(t), t);\n    }\n  },\n\n  rem(t) {\n    const key = this.cellkey(t),\n          cell = this.cell(key, t);\n\n    cell.num -= 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.rem(t);\n\n    const agg = cell.agg;\n    for (let i=0, n=agg.length; i<n; ++i) {\n      agg[i].rem(agg[i].get(t), t);\n    }\n  },\n\n  celltuple(cell) {\n    const tuple = cell.tuple,\n          counts = this._counts;\n\n    // consolidate stored values\n    if (cell.store) {\n      cell.data.values();\n    }\n\n    // update tuple properties\n    for (let i=0, n=counts.length; i<n; ++i) {\n      tuple[counts[i]] = cell.num;\n    }\n    if (!this._countOnly) {\n      const agg = cell.agg;\n      for (let i=0, n=agg.length; i<n; ++i) {\n        agg[i].set(tuple);\n      }\n    }\n\n    return tuple;\n  },\n\n  changes(out) {\n    const adds = this._adds,\n          mods = this._mods,\n          prev = this._prev,\n          drop = this._drop,\n          add = out.add,\n          rem = out.rem,\n          mod = out.mod;\n\n    let cell, key, i, n;\n\n    if (prev) for (key in prev) {\n      cell = prev[key];\n      if (!drop || cell.num) rem.push(cell.tuple);\n    }\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      add.push(this.celltuple(adds[i]));\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      cell = mods[i];\n      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n    this._prev = null;\n    return out;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {bin} from 'vega-statistics';\nimport {accessor, accessorFields, accessorName, inherits, toNumber} from 'vega-util';\n\n// epsilon bias to offset floating point error (#1737)\nconst EPSILON = 1e-14;\n\n/**\n * Generates a binning function for discretizing data.\n * @constructor\n * @param {object} params - The parameters for this operator. The\n *   provided values should be valid options for the {@link bin} function.\n * @param {function(object): *} params.field - The data field to bin.\n */\nexport default function Bin(params) {\n  Transform.call(this, null, params);\n}\n\nBin.Definition = {\n  'type': 'Bin',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'interval', 'type': 'boolean', 'default': true },\n    { 'name': 'anchor', 'type': 'number' },\n    { 'name': 'maxbins', 'type': 'number', 'default': 20 },\n    { 'name': 'base', 'type': 'number', 'default': 10 },\n    { 'name': 'divide', 'type': 'number', 'array': true, 'default': [5, 2] },\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2, 'required': true },\n    { 'name': 'span', 'type': 'number' },\n    { 'name': 'step', 'type': 'number' },\n    { 'name': 'steps', 'type': 'number', 'array': true },\n    { 'name': 'minstep', 'type': 'number', 'default': 0 },\n    { 'name': 'nice', 'type': 'boolean', 'default': true },\n    { 'name': 'name', 'type': 'string' },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['bin0', 'bin1'] }\n  ]\n};\n\ninherits(Bin, Transform, {\n  transform(_, pulse) {\n    const band = _.interval !== false,\n        bins = this._bins(_),\n        start = bins.start,\n        step = bins.step,\n        as = _.as || ['bin0', 'bin1'],\n        b0 = as[0],\n        b1 = as[1];\n\n    let flag;\n    if (_.modified()) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n    } else {\n      flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n    }\n\n    pulse.visit(flag, band\n      ? t => {\n          const v = bins(t);\n          // minimum bin value (inclusive)\n          t[b0] = v;\n          // maximum bin value (exclusive)\n          // use convoluted math for better floating point agreement\n          // see https://github.com/vega/vega/issues/830\n          // infinite values propagate through this formula! #2227\n          t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n        }\n      : t => t[b0] = bins(t)\n    );\n\n    return pulse.modifies(band ? as : b0);\n  },\n\n  _bins(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    const field = _.field,\n          bins  = bin(_),\n          step  = bins.step;\n    let start = bins.start,\n        stop  = start + Math.ceil((bins.stop - start) / step) * step,\n        a, d;\n\n    if ((a = _.anchor) != null) {\n      d = a - (start + step * Math.floor((a - start) / step));\n      start += d;\n      stop += d;\n    }\n\n    const f = function(t) {\n      let v = toNumber(field(t));\n      return v == null ? null\n        : v < start ? -Infinity\n        : v > stop ? +Infinity\n        : (\n            v = Math.max(start, Math.min(v, stop - step)),\n            start + step * Math.floor(EPSILON + (v - start) / step)\n          );\n    };\n\n    f.start = start;\n    f.stop = bins.stop;\n    f.step = step;\n\n    return this.value = accessor(\n      f,\n      accessorFields(field),\n      _.name || 'bin_' + accessorName(field)\n    );\n  }\n});\n","import {merge} from 'vega-util';\n\nexport default function(idFunc, source, input) {\n  const $ = idFunc;\n  let data = source || [],\n      add = input || [],\n      rem = {},\n      cnt = 0;\n\n  return {\n    add: t => add.push(t),\n    remove: t => rem[$(t)] = ++cnt,\n    size: () => data.length,\n    data: (compare, resort) => {\n      if (cnt) {\n        data = data.filter(t => !rem[$(t)]);\n        rem = {};\n        cnt = 0;\n      }\n      if (resort && compare) {\n        data.sort(compare);\n      }\n      if (add.length) {\n        data = compare\n          ? merge(compare, data, add.sort(compare))\n          : data.concat(add);\n        add = [];\n      }\n      return data;\n    }\n  };\n}","import SortedList from './util/SortedList';\nimport {Transform, stableCompare, tupleid} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Collects all data tuples that pass through this operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for additionally sorting the collected tuples.\n */\nexport default function Collect(params) {\n  Transform.call(this, [], params);\n}\n\nCollect.Definition = {\n  'type': 'Collect',\n  'metadata': {'source': true},\n  'params': [\n    { 'name': 'sort', 'type': 'compare' }\n  ]\n};\n\ninherits(Collect, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.ALL),\n          list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),\n          sort = _.sort,\n          mod = pulse.changed() || (sort &&\n                (_.modified('sort') || pulse.modified(sort.fields)));\n\n    out.visit(out.REM, list.remove);\n\n    this.modified(mod);\n    this.value = out.source = list.data(stableCompare(sort), mod);\n\n    // propagate tree root if defined\n    if (pulse.source && pulse.source.root) {\n      this.value.root = pulse.source.root;\n    }\n\n    return out;\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {compare, inherits} from 'vega-util';\n\n/**\n * Generates a comparator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string|function>} params.fields - The fields to compare.\n * @param {Array<string>} [params.orders] - The sort orders.\n *   Each entry should be one of \"ascending\" (default) or \"descending\".\n */\nexport default function Compare(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(Compare, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified())\n    ? this.value\n    : compare(_.fields, _.orders);\n}\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Count regexp-defined pattern occurrences in a text field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the text field.\n * @param {string} [params.pattern] - RegExp string defining the text pattern.\n * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n * @param {string} [params.stopwords] - RegExp string of words to ignore.\n */\nexport default function CountPattern(params) {\n  Transform.call(this, null, params);\n}\n\nCountPattern.Definition = {\n  'type': 'CountPattern',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'case', 'type': 'enum', 'values': ['upper', 'lower', 'mixed'], 'default': 'mixed' },\n    { 'name': 'pattern', 'type': 'string', 'default': '[\\\\w\"]+' },\n    { 'name': 'stopwords', 'type': 'string', 'default': '' },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['text', 'count'] }\n  ]\n};\n\nfunction tokenize(text, tcase, match) {\n  switch (tcase) {\n    case 'upper': text = text.toUpperCase(); break;\n    case 'lower': text = text.toLowerCase(); break;\n  }\n  return text.match(match);\n}\n\ninherits(CountPattern, Transform, {\n  transform(_, pulse) {\n    const process = update => tuple => {\n      var tokens = tokenize(get(tuple), _.case, match) || [], t;\n      for (var i=0, n=tokens.length; i<n; ++i) {\n        if (!stop.test(t = tokens[i])) update(t);\n      }\n    };\n\n    const init = this._parameterCheck(_, pulse),\n          counts = this._counts,\n          match = this._match,\n          stop = this._stop,\n          get = _.field,\n          as = _.as || ['text', 'count'],\n          add = process(t => counts[t] = 1 + (counts[t] || 0)),\n          rem = process(t => counts[t] -= 1);\n\n    if (init) {\n      pulse.visit(pulse.SOURCE, add);\n    } else {\n      pulse.visit(pulse.ADD, add);\n      pulse.visit(pulse.REM, rem);\n    }\n\n    return this._finish(pulse, as); // generate output tuples\n  },\n\n  _parameterCheck(_, pulse) {\n    let init = false;\n\n    if (_.modified('stopwords') || !this._stop) {\n      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n      init = true;\n    }\n\n    if (_.modified('pattern') || !this._match) {\n      this._match = new RegExp((_.pattern || '[\\\\w\\']+'), 'g');\n      init = true;\n    }\n\n    if (_.modified('field') || pulse.modified(_.field.fields)) {\n      init = true;\n    }\n\n    if (init) this._counts = {};\n    return init;\n  },\n\n  _finish(pulse, as) {\n    const counts = this._counts,\n          tuples = this._tuples || (this._tuples = {}),\n          text = as[0],\n          count = as[1],\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n    let w, t, c;\n\n    for (w in counts) {\n      t = tuples[w];\n      c = counts[w] || 0;\n      if (!t && c) {\n        tuples[w] = (t = ingest({}));\n        t[text] = w;\n        t[count] = c;\n        out.add.push(t);\n      } else if (c === 0) {\n        if (t) out.rem.push(t);\n        counts[w] = null;\n        tuples[w] = null;\n      } else if (t[count] !== c) {\n        t[count] = c;\n        out.mod.push(t);\n      }\n    }\n\n    return out.modifies(as);\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits, truthy} from 'vega-util';\n\n/**\n * Perform a cross-product of a tuple stream with itself.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object):boolean} [params.filter] - An optional filter\n *   function for selectively including tuples in the cross product.\n * @param {Array<string>} [params.as] - The names of the output fields.\n */\nexport default function Cross(params) {\n  Transform.call(this, null, params);\n}\n\nCross.Definition = {\n  'type': 'Cross',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'filter', 'type': 'expr' },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['a', 'b'] }\n  ]\n};\n\ninherits(Cross, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          as = _.as || ['a', 'b'],\n          a = as[0], b = as[1],\n          reset = !this.value\n              || pulse.changed(pulse.ADD_REM)\n              || _.modified('as')\n              || _.modified('filter');\n\n    let data = this.value;\n    if (reset) {\n      if (data) out.rem = data;\n      data = pulse.materialize(pulse.SOURCE).source;\n      out.add = this.value = cross(data, a, b, _.filter || truthy);\n    } else {\n      out.mod = data;\n    }\n\n    out.source = this.value;\n    return out.modifies(as);\n  }\n});\n\nfunction cross(input, a, b, filter) {\n  var data = [],\n      t = {},\n      n = input.length,\n      i = 0,\n      j, left;\n\n  for (; i<n; ++i) {\n    t[a] = left = input[i];\n    for (j=0; j<n; ++j) {\n      t[b] = input[j];\n      if (filter(t)) {\n        data.push(ingest(t));\n        t = {};\n        t[a] = left;\n      }\n    }\n  }\n\n  return data;\n}\n","import {\n  randomKDE,\n  randomLogNormal,\n  randomMixture,\n  randomNormal,\n  randomUniform\n} from 'vega-statistics';\n\nimport {error, hasOwnProperty} from 'vega-util';\n\nconst Distributions = {\n  kde:       randomKDE,\n  mixture:   randomMixture,\n  normal:    randomNormal,\n  lognormal: randomLogNormal,\n  uniform:   randomUniform\n};\n\nconst DISTRIBUTIONS = 'distributions',\n      FUNCTION = 'function',\n      FIELD = 'field';\n\n/**\n * Parse a parameter object for a probability distribution.\n * @param {object} def - The distribution parameter object.\n * @param {function():Array<object>} - A method for requesting\n *   source data. Used for distributions (such as KDE) that\n *   require sample data points. This method will only be\n *   invoked if the 'from' parameter for a target data source\n *   is not provided. Typically this method returns backing\n *   source data for a Pulse object.\n * @return {object} - The output distribution object.\n */\nexport default function parse(def, data) {\n  const func = def[FUNCTION];\n  if (!hasOwnProperty(Distributions, func)) {\n    error('Unknown distribution function: ' + func);\n  }\n\n  const d = Distributions[func]();\n\n  for (const name in def) {\n    // if data field, extract values\n    if (name === FIELD) {\n      d.data((def.from || data()).map(def[name]));\n    }\n\n    // if distribution mixture, recurse to parse each definition\n    else if (name === DISTRIBUTIONS) {\n      d[name](def[name].map(_ => parse(_, data)));\n    }\n\n    // otherwise, simply set the parameter\n    else if (typeof d[name] === FUNCTION) {\n      d[name](def[name]);\n    }\n  }\n\n  return d;\n}\n","import parseDist from './util/Distributions';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {sampleCurve} from 'vega-statistics';\nimport {error, extent, inherits} from 'vega-util';\n\n/**\n * Grid sample points for a probability density. Given a distribution and\n * a sampling extent, will generate points suitable for plotting either\n * PDF (probability density function) or CDF (cumulative distribution\n * function) curves.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.distribution - The probability distribution. This\n *   is an object parameter dependent on the distribution type.\n * @param {string} [params.method='pdf'] - The distribution method to sample.\n *   One of 'pdf' or 'cdf'.\n * @param {Array<number>} [params.extent] - The [min, max] extent over which\n *   to sample the distribution. This argument is required in most cases, but\n *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n *   that returns numerical sample points from which the extent can be deduced.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\nexport default function Density(params) {\n  Transform.call(this, null, params);\n}\n\nconst distributions = [\n  {\n    'key': {'function': 'normal'},\n    'params': [\n      { 'name': 'mean', 'type': 'number', 'default': 0 },\n      { 'name': 'stdev', 'type': 'number', 'default': 1 }\n    ]\n  },\n  {\n    'key': {'function': 'lognormal'},\n    'params': [\n      { 'name': 'mean', 'type': 'number', 'default': 0 },\n      { 'name': 'stdev', 'type': 'number', 'default': 1 }\n    ]\n  },\n  {\n    'key': {'function': 'uniform'},\n    'params': [\n      { 'name': 'min', 'type': 'number', 'default': 0 },\n      { 'name': 'max', 'type': 'number', 'default': 1 }\n    ]\n  },\n  {\n    'key': {'function': 'kde'},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'from', 'type': 'data' },\n      { 'name': 'bandwidth', 'type': 'number', 'default': 0 }\n    ]\n  }\n];\n\nconst mixture = {\n  'key': {'function': 'mixture'},\n  'params': [\n    { 'name': 'distributions', 'type': 'param', 'array': true,\n      'params': distributions },\n    { 'name': 'weights', 'type': 'number', 'array': true }\n  ]\n};\n\nDensity.Definition = {\n  'type': 'Density',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'steps', 'type': 'number' },\n    { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n    { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n    { 'name': 'method', 'type': 'string', 'default': 'pdf',\n      'values': ['pdf', 'cdf'] },\n    { 'name': 'distribution', 'type': 'param',\n      'params': distributions.concat(mixture) },\n    { 'name': 'as', 'type': 'string', 'array': true,\n      'default': ['value', 'density'] }\n  ]\n};\n\ninherits(Density, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const dist = parseDist(_.distribution, source(pulse)),\n            minsteps = _.steps || _.minsteps || 25,\n            maxsteps = _.steps || _.maxsteps || 200;\n      let method = _.method || 'pdf';\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n      if (!_.extent && !dist.data) {\n        error('Missing density extent parameter.');\n      }\n      method = dist[method];\n\n      const as = _.as || ['value', 'density'],\n            domain = _.extent || extent(dist.data()),\n            values = sampleCurve(method, domain, minsteps, maxsteps)\n              .map(v => {\n                const tuple = {};\n                tuple[as[0]] = v[0];\n                tuple[as[1]] = v[1];\n                return ingest(tuple);\n              });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n});\n\nfunction source(pulse) {\n  return () => pulse.materialize(pulse.SOURCE).source;\n}\n","import {accessorName} from 'vega-util';\n\n// use either provided alias or accessor field name\nexport function fieldNames(fields, as) {\n  if (!fields) return null;\n  return fields.map((f, i) => as[i] || accessorName(f));\n}\n\nexport function partition(data, groupby, field) {\n  const groups = [],\n        get = f => f(t);\n  let map, i, n, t, k, g;\n\n  // partition data points into groups\n  if (groupby == null) {\n    groups.push(data.map(field));\n  } else {\n    for (map={}, i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k];\n      if (!g) {\n        map[k] = (g = []);\n        g.dims = k;\n        groups.push(g);\n      }\n      g.push(field(t));\n    }\n  }\n\n  return groups;\n}\n","import {partition} from './util/util';\nimport {Transform, stableCompare} from 'vega-dataflow';\nimport {dotbin} from 'vega-statistics';\nimport {extent, identity, inherits, span} from 'vega-util';\n\nconst Output = 'bin';\n\n/**\n * Dot density binning for dot plot construction.\n * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to bin.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {number} [params.step] - The step size (bin width) within which dots should be\n *   stacked. Defaults to 1/30 of the extent of the data *field*.\n * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n *   stacks should be smoothed to reduce variance.\n */\nexport default function DotBin(params) {\n  Transform.call(this, null, params);\n}\n\nDotBin.Definition = {\n  'type': 'DotBin',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'step', 'type': 'number' },\n    { 'name': 'smooth', 'type': 'boolean', 'default': false },\n    { 'name': 'as', 'type': 'string', 'default': Output }\n  ]\n};\n\nconst autostep = (data, field) => span(extent(data, field)) / 30;\n\ninherits(DotBin, Transform, {\n  transform(_, pulse) {\n    if (this.value && !(_.modified() || pulse.changed())) {\n      return pulse; // early exit\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(pulse.source, _.groupby, identity),\n          smooth = _.smooth || false,\n          field = _.field,\n          step = _.step || autostep(source, field),\n          sort = stableCompare((a, b) => field(a) - field(b)),\n          as = _.as || Output,\n          n = groups.length;\n\n    // compute dotplot bins per group\n    let min = Infinity, max = -Infinity, i = 0, j;\n    for (; i<n; ++i) {\n      const g = groups[i].sort(sort);\n      j = -1;\n      for (const v of dotbin(g, step, smooth, field)) {\n        if (v < min) min = v;\n        if (v > max) max = v;\n        g[++j][as] = v;\n      }\n    }\n\n    this.value = {\n      start: min,\n      stop: max,\n      step: step\n    };\n    return pulse.reflow(true).modifies(as);\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {accessor, accessorFields, accessorName, inherits} from 'vega-util';\n\n/**\n * Wraps an expression function with access to external parameters.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function} params.expr - The expression function. The\n *  function should accept both a datum and a parameter object.\n *  This operator's value will be a new function that wraps the\n *  expression function with access to this operator's parameters.\n */\nexport default function Expression(params) {\n  Operator.call(this, null, update, params);\n  this.modified(true);\n}\n\ninherits(Expression, Operator);\n\nfunction update(_) {\n  const expr = _.expr;\n  return this.value && !_.modified('expr')\n    ? this.value\n    : accessor(\n        datum => expr(datum, _),\n        accessorFields(expr),\n        accessorName(expr)\n      );\n}\n","import {Transform} from 'vega-dataflow';\nimport {accessorName, inherits, toNumber} from 'vega-util';\n\n/**\n * Computes extents (min/max) for a data field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field over which to compute extends.\n */\nexport default function Extent(params) {\n  Transform.call(this, [undefined, undefined], params);\n}\n\nExtent.Definition = {\n  'type': 'Extent',\n  'metadata': {},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true }\n  ]\n};\n\ninherits(Extent, Transform, {\n  transform(_, pulse) {\n    const extent = this.value,\n          field = _.field,\n          mod = pulse.changed()\n            || pulse.modified(field.fields)\n            || _.modified('field');\n\n    let min = extent[0],\n        max = extent[1];\n    if (mod || min == null) {\n      min = +Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n      const v = toNumber(field(t));\n      if (v != null) {\n        // NaNs will fail all comparisons!\n        if (v < min) min = v;\n        if (v > max) max = v;\n      }\n    });\n\n    if (!Number.isFinite(min) || !Number.isFinite(max)) {\n      let name = accessorName(field);\n      if (name) name = ` for field \"${name}\"`;\n      pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n      min = max = undefined;\n    }\n    this.value = [min, max];\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Provides a bridge between a parent transform and a target subflow that\n * consumes only a subset of the tuples that pass through the parent.\n * @constructor\n * @param {Pulse} pulse - A pulse to use as the value of this operator.\n * @param {Transform} parent - The parent transform (typically a Facet instance).\n */\nexport default function Subflow(pulse, parent) {\n  Operator.call(this, pulse);\n  this.parent = parent;\n  this.count = 0;\n}\n\ninherits(Subflow, Operator, {\n  /**\n   * Routes pulses from this subflow to a target transform.\n   * @param {Transform} target - A transform that receives the subflow of tuples.\n   */\n  connect(target) {\n    this.detachSubflow = target.detachSubflow;\n    this.targets().add(target);\n    return (target.source = this);\n  },\n\n  /**\n   * Add an 'add' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being added.\n   */\n  add(t) {\n    this.count += 1;\n    this.value.add.push(t);\n  },\n\n  /**\n   * Add a 'rem' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being removed.\n   */\n  rem(t) {\n    this.count -= 1;\n    this.value.rem.push(t);\n  },\n\n  /**\n   * Add a 'mod' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being modified.\n   */\n  mod(t) {\n    this.value.mod.push(t);\n  },\n\n  /**\n   * Re-initialize this operator's pulse value.\n   * @param {Pulse} pulse - The pulse to copy from.\n   * @see Pulse.init\n   */\n  init(pulse) {\n    this.value.init(pulse, pulse.NO_SOURCE);\n  },\n\n  /**\n   * Evaluate this operator. This method overrides the\n   * default behavior to simply return the contained pulse value.\n   * @return {Pulse}\n   */\n  evaluate() {\n    // assert: this.value.stamp === pulse.stamp\n    return this.value;\n  }\n});\n","import Subflow from './Subflow';\nimport {Transform, tupleid} from 'vega-dataflow';\nimport {fastmap, hasOwnProperty, inherits} from 'vega-util';\n\n/**\n * Facets a dataflow into a set of subflows based on a key.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): *} params.key - The key field to facet by.\n */\nexport default function Facet(params) {\n  Transform.call(this, {}, params);\n  this._keys = fastmap(); // cache previously calculated key values\n\n  // keep track of active subflows, use as targets array for listeners\n  // this allows us to limit propagation to only updated subflows\n  const a = this._targets = [];\n  a.active = 0;\n  a.forEach = f => {\n    for (let i=0, n=a.active; i<n; ++i) {\n      f(a[i], i, a);\n    }\n  };\n}\n\ninherits(Facet, Transform, {\n  activate(flow) {\n    this._targets[this._targets.active++] = flow;\n  },\n\n  // parent argument provided by PreFacet subclass\n  subflow(key, flow, pulse, parent) {\n    const flows = this.value;\n    let sf = hasOwnProperty(flows, key) && flows[key],\n        df, p;\n\n    if (!sf) {\n      p = parent || (p = this._group[key]) && p.tuple;\n      df = pulse.dataflow;\n      sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n      df.add(sf).connect(flow(df, key, p));\n      flows[key] = sf;\n      this.activate(sf);\n    } else if (sf.value.stamp < pulse.stamp) {\n      sf.init(pulse);\n      this.activate(sf);\n    }\n\n    return sf;\n  },\n\n  clean() {\n    const flows = this.value;\n    let detached = 0;\n    for (const key in flows) {\n      if (flows[key].count === 0) {\n        const detach = flows[key].detachSubflow;\n        if (detach) detach();\n        delete flows[key];\n        ++detached;\n      }\n    }\n\n    // remove inactive targets from the active targets array\n    if (detached) {\n      const active = this._targets.filter(sf => sf && sf.count > 0);\n      this.initTargets(active);\n    }\n  },\n\n  initTargets(act) {\n    const a = this._targets,\n          n = a.length,\n          m = act ? act.length : 0;\n    let i = 0;\n\n    for (; i<m; ++i) {\n      a[i] = act[i];\n    }\n    for (; i<n && a[i] != null; ++i) {\n      a[i] = null; // ensure old flows can be garbage collected\n    }\n    a.active = m;\n  },\n\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n          key = _.key,\n          flow = _.subflow,\n          cache = this._keys,\n          rekey = _.modified('key'),\n          subflow = key => this.subflow(key, flow, pulse);\n\n    this._group = _.group || {};\n    this.initTargets(); // reset list of active subflows\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t),\n            k = cache.get(id);\n      if (k !== undefined) {\n        cache.delete(id);\n        subflow(k).rem(t);\n      }\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      const k = key(t);\n      cache.set(tupleid(t), k);\n      subflow(k).add(t);\n    });\n\n    if (rekey || pulse.modified(key.fields)) {\n      pulse.visit(pulse.MOD, t => {\n        const id = tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n        if (k0 === k1) {\n          subflow(k1).mod(t);\n        } else {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    } else if (pulse.changed(pulse.MOD)) {\n      pulse.visit(pulse.MOD, t => {\n        subflow(cache.get(tupleid(t))).mod(t);\n      });\n    }\n\n    if (rekey) {\n      pulse.visit(pulse.REFLOW, t => {\n        const id = tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n        if (k0 !== k1) {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    }\n\n    if (pulse.clean()) {\n      df.runAfter(() => { this.clean(); cache.clean(); });\n    } else if (cache.empty > df.cleanThreshold) {\n      df.runAfter(cache.clean);\n    }\n\n    return pulse;\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {array, field, inherits, isArray} from 'vega-util';\n\n/**\n * Generates one or more field accessor functions.\n * If the 'name' parameter is an array, an array of field accessors\n * will be created and the 'as' parameter will be ignored.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.name - The field name(s) to access.\n * @param {string} params.as - The accessor function name.\n */\nexport default function Field(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(Field, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified()) ? this.value\n    : isArray(_.name) ? array(_.name).map(f => field(f))\n    : field(_.name, _.as);\n}\n","import {Transform, tupleid} from 'vega-dataflow';\nimport {fastmap, inherits} from 'vega-util';\n\n/**\n * Filters data tuples according to a predicate function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The predicate expression function\n *   that determines a tuple's filter status. Truthy values pass the filter.\n */\nexport default function Filter(params) {\n  Transform.call(this, fastmap(), params);\n}\n\nFilter.Definition = {\n  'type': 'Filter',\n  'metadata': {'changes': true},\n  'params': [\n    { 'name': 'expr', 'type': 'expr', 'required': true }\n  ]\n};\n\ninherits(Filter, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n          cache = this.value, // cache ids of filtered tuples\n          output = pulse.fork(),\n          add = output.add,\n          rem = output.rem,\n          mod = output.mod,\n          test = _.expr;\n    let isMod = true;\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t);\n      if (!cache.has(id)) rem.push(t);\n      else cache.delete(id);\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      if (test(t, _)) add.push(t);\n      else cache.set(tupleid(t), 1);\n    });\n\n    function revisit(t) {\n      const id = tupleid(t),\n            b = test(t, _),\n            s = cache.get(id);\n      if (b && s) {\n        cache.delete(id);\n        add.push(t);\n      } else if (!b && !s) {\n        cache.set(id, 1);\n        rem.push(t);\n      } else if (isMod && b && !s) {\n        mod.push(t);\n      }\n    }\n\n    pulse.visit(pulse.MOD, revisit);\n\n    if (_.modified()) {\n      isMod = false;\n      pulse.visit(pulse.REFLOW, revisit);\n    }\n\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return output;\n  }\n});\n","import {fieldNames} from './util/util';\nimport {Transform, derive} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Flattens array-typed field values into new data objects.\n * If multiple fields are specified, they are treated as parallel arrays,\n * with output values included for each matching index (or null if missing).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} params.fields - An array of field\n *   accessors for the tuple fields that should be flattened.\n * @param {string} [params.index] - Optional output field name for index\n *   value. If unspecified, no index field is included in the output.\n * @param {Array<string>} [params.as] - Output field names for flattened\n *   array fields. Any unspecified fields will use the field name provided\n *   by the fields accessors.\n */\nexport default function Flatten(params) {\n  Transform.call(this, [], params);\n}\n\nFlatten.Definition = {\n  'type': 'Flatten',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'index', 'type': 'string' },\n    { 'name': 'as', 'type': 'string', 'array': true }\n  ]\n};\n\ninherits(Flatten, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          as = fieldNames(fields, _.as || []),\n          index = _.index || null,\n          m = as.length;\n\n    // remove any previous results\n    out.rem = this.value;\n\n    // generate flattened tuples\n    pulse.visit(pulse.SOURCE, t => {\n      const arrays = fields.map(f => f(t)),\n            maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n      let i = 0, j, d, v;\n\n      for (; i<maxlen; ++i) {\n        d = derive(t);\n        for (j=0; j<m; ++j) {\n          d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n        }\n        if (index) {\n          d[index] = i;\n        }\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    if (index) out.modifies(index);\n    return out.modifies(as);\n  }\n});\n","import {Transform, derive} from 'vega-dataflow';\nimport {accessorName, inherits} from 'vega-util';\n\n/**\n * Folds one more tuple fields into multiple tuples in which the field\n * name and values are available under new 'key' and 'value' fields.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.fields - An array of field accessors\n *   for the tuple fields that should be folded.\n * @param {Array<string>} [params.as] - Output field names for folded key\n *   and value fields, defaults to ['key', 'value'].\n */\nexport default function Fold(params) {\n  Transform.call(this, [], params);\n}\n\nFold.Definition = {\n  'type': 'Fold',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['key', 'value'] }\n  ]\n};\n\ninherits(Fold, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          fnames = fields.map(accessorName),\n          as = _.as || ['key', 'value'],\n          k = as[0],\n          v = as[1],\n          n = fields.length;\n\n    out.rem = this.value;\n\n    pulse.visit(pulse.SOURCE, t => {\n      for (let i=0, d; i<n; ++i) {\n        d = derive(t);\n        d[k] = fnames[i];\n        d[v] = fields[i](t);\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    return out.modifies(as);\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Invokes a function for each data tuple and saves the results as a new field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n * @param {string} params.as - The field name under which to save the result.\n * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n *   added tuples only, and does not update in response to modifications.\n */\nexport default function Formula(params) {\n  Transform.call(this, null, params);\n}\n\nFormula.Definition = {\n  'type': 'Formula',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'expr', 'type': 'expr', 'required': true },\n    { 'name': 'as', 'type': 'string', 'required': true },\n    { 'name': 'initonly', 'type': 'boolean' }\n  ]\n};\n\ninherits(Formula, Transform, {\n  transform (_, pulse) {\n    const func = _.expr,\n          as = _.as,\n          mod = _.modified(),\n          flag = _.initonly ? pulse.ADD\n            : mod ? pulse.SOURCE\n            : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD\n            : pulse.ADD;\n\n    if (mod) {\n      // parameters updated, need to reflow\n      pulse = pulse.materialize().reflow(true);\n    }\n\n    if (!_.initonly) {\n      pulse.modifies(as);\n    }\n\n    return pulse.visit(flag, t => t[as] = func(t, _));\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Generates data tuples using a provided generator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Parameters): object} params.generator - A tuple generator\n *   function. This function is given the operator parameters as input.\n *   Changes to any additional parameters will not trigger re-calculation\n *   of previously generated tuples. Only future tuples are affected.\n * @param {number} params.size - The number of tuples to produce.\n */\nexport default function Generate(params) {\n  Transform.call(this, [], params);\n}\n\ninherits(Generate, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.ALL),\n          gen = _.generator;\n\n    let data = this.value,\n        num = _.size - data.length,\n        add, rem, t;\n\n    if (num > 0) {\n      // need more tuples, generate and add\n      for (add=[]; --num >= 0;) {\n        add.push(t = ingest(gen(_)));\n        data.push(t);\n      }\n      out.add = out.add.length\n        ? out.materialize(out.ADD).add.concat(add)\n        : add;\n    } else {\n      // need fewer tuples, remove\n      rem = data.slice(0, -num);\n      out.rem = out.rem.length\n        ? out.materialize(out.REM).rem.concat(rem)\n        : rem;\n      data = data.slice(-num);\n    }\n\n    out.source = this.value = data;\n    return out;\n  }\n});\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending.js\";\n\nexport default function(f) {\n  let delta = f;\n  let compare = f;\n\n  if (f.length === 1) {\n    delta = (d, x) => f(d) - x;\n    compare = ascendingComparator(f);\n  }\n\n  function left(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) < 0) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  function right(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) > 0) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  function center(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction ascendingComparator(f) {\n  return (d, x) => ascending(f(d), x);\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","import ascending from \"./ascending.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n","import max from \"./max.js\";\nimport min from \"./min.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","export default function(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","import {Transform, ingest} from 'vega-dataflow';\nimport {accessorName, error, inherits} from 'vega-util';\nimport {max, mean, median, min} from 'd3-array';\n\nconst Methods = {\n  value: 'value',\n  median: median,\n  mean: mean,\n  min: min,\n  max: max\n};\n\nconst Empty = [];\n\n/**\n * Impute missing values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to impute.\n * @param {Array<function(object): *>} [params.groupby] - An array of\n *   accessors to determine series within which to perform imputation.\n * @param {function(object): *} params.key - An accessor for a key value.\n *   Each key value should be unique within a group. New tuples will be\n *   imputed for any key values that are not found within a group.\n * @param {Array<*>} [params.keyvals] - Optional array of required key\n *   values. New tuples will be imputed for any key values that are not\n *   found within a group. In addition, these values will be automatically\n *   augmented with the key values observed in the input data.\n * @param {string} [method='value'] - The imputation method to use. One of\n *   'value', 'mean', 'median', 'max', 'min'.\n * @param {*} [value=0] - The constant value to use for imputation\n *   when using method 'value'.\n */\nexport default function Impute(params) {\n  Transform.call(this, [], params);\n}\n\nImpute.Definition = {\n  'type': 'Impute',\n  'metadata': {'changes': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'key', 'type': 'field', 'required': true },\n    { 'name': 'keyvals', 'array': true },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'method', 'type': 'enum', 'default': 'value',\n      'values': ['value', 'mean', 'median', 'max', 'min'] },\n    { 'name': 'value', 'default': 0 }\n  ]\n};\n\nfunction getValue(_) {\n  var m = _.method || Methods.value, v;\n\n  if (Methods[m] == null) {\n    error('Unrecognized imputation method: ' + m);\n  } else if (m === Methods.value) {\n    v = _.value !== undefined ? _.value : 0;\n    return () => v;\n  } else {\n    return Methods[m];\n  }\n}\n\nfunction getField(_) {\n  const f = _.field;\n  return t => t ? f(t) : NaN;\n}\n\ninherits(Impute, Transform, {\n  transform(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        impute = getValue(_),\n        field = getField(_),\n        fName = accessorName(_.field),\n        kName = accessorName(_.key),\n        gNames = (_.groupby || []).map(accessorName),\n        groups = partition(pulse.source, _.groupby, _.key, _.keyvals),\n        curr = [],\n        prev = this.value,\n        m = groups.domain.length,\n        group, value, gVals, kVal, g, i, j, l, n, t;\n\n    for (g=0, l=groups.length; g<l; ++g) {\n      group = groups[g];\n      gVals = group.values;\n      value = NaN;\n\n      // add tuples for missing values\n      for (j=0; j<m; ++j) {\n        if (group[j] != null) continue;\n        kVal = groups.domain[j];\n\n        t = {_impute: true};\n        for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];\n        t[kName] = kVal;\n        t[fName] = Number.isNaN(value) ? (value = impute(group, field)) : value;\n\n        curr.push(ingest(t));\n      }\n    }\n\n    // update pulse with imputed tuples\n    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n    this.value = curr;\n\n    return out;\n  }\n});\n\nfunction partition(data, groupby, key, keyvals) {\n  var get = f => f(t),\n      groups = [],\n      domain = keyvals ? keyvals.slice() : [],\n      kMap = {},\n      gMap = {}, gVals, gKey,\n      group, i, j, k, n, t;\n\n  domain.forEach((k, i) => kMap[k] = i + 1);\n\n  for (i=0, n=data.length; i<n; ++i) {\n    t = data[i];\n    k = key(t);\n    j = kMap[k] || (kMap[k] = domain.push(k));\n\n    gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n    if (!(group = gMap[gKey])) {\n      group = (gMap[gKey] = []);\n      groups.push(group);\n      group.values = gVals;\n    }\n    group[j-1] = t;\n  }\n\n  groups.domain = domain;\n  return groups;\n}\n","import quantile from \"./quantile.js\";\n\nexport default function(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n","export default function mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n","import Aggregate from './Aggregate';\nimport {ValidAggregateOps} from './util/AggregateOps';\nimport {extend, inherits} from 'vega-util';\n\n/**\n * Extend input tuples with aggregate values.\n * Calcuates aggregate values and joins them with the input stream.\n * @constructor\n */\nexport default function JoinAggregate(params) {\n  Aggregate.call(this, params);\n}\n\nJoinAggregate.Definition = {\n  'type': 'JoinAggregate',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n    { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n    { 'name': 'key', 'type': 'field' }\n  ]\n};\n\ninherits(JoinAggregate, Aggregate, {\n  transform(_, pulse) {\n    const aggr = this,\n          mod = _.modified();\n    let cells;\n\n    // process all input tuples to calculate aggregates\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      cells = aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      cells = aggr.value = aggr.value || this.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    }\n\n    // update aggregation cells\n    aggr.changes();\n\n    // write aggregate values to input tuples\n    pulse.visit(pulse.SOURCE, t => {\n      extend(t, cells[aggr.cellkey(t)].tuple);\n    });\n\n    return pulse.reflow(mod).modifies(this._outputs);\n  },\n\n  changes() {\n    const adds = this._adds,\n          mods = this._mods;\n    let i, n;\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      this.celltuple(adds[i]);\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      this.celltuple(mods[i]);\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n  }\n});\n","import {partition} from './util/util';\nimport {randomKDE} from 'vega-statistics';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {sampleCurve} from 'vega-statistics';\nimport {accessorName, error, extent, inherits} from 'vega-util';\n\n/**\n * Compute kernel density estimates (KDE) for one or more data groups.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {function(object): *} params.field - An accessor for the data field\n *   to estimate.\n * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n *   If zero or unspecified, the bandwidth is automatically determined.\n * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n *   output values should be probability estimates (false, default) or\n *   smoothed counts (true).\n * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n *   density (false) or cumulative distribution (true) should be generated.\n * @param {Array<number>} [params.extent] - The domain extent over which to\n *   plot the density. If unspecified, the [min, max] data extent is used.\n * @param {string} [params.resolve='independent'] - Indicates how parameters for\n *   multiple densities should be resolved. If \"independent\" (the default), each\n *   density may have its own domain extent and dynamic number of curve sample\n *   steps. If \"shared\", the KDE transform will ensure that all densities are\n *   defined over a shared domain and curve steps, enabling stacking.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\nexport default function KDE(params) {\n  Transform.call(this, null, params);\n}\n\nKDE.Definition = {\n  'type': 'KDE',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'cumulative', 'type': 'boolean', 'default': false },\n    { 'name': 'counts', 'type': 'boolean', 'default': false },\n    { 'name': 'bandwidth', 'type': 'number', 'default': 0 },\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'resolve', 'type': 'enum', 'values': ['shared', 'independent'], 'default': 'independent' },\n    { 'name': 'steps', 'type': 'number' },\n    { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n    { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'default': ['value', 'density'] }\n  ]\n};\n\ninherits(KDE, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(source, _.groupby, _.field),\n            names = (_.groupby || []).map(accessorName),\n            bandwidth = _.bandwidth,\n            method = _.cumulative ? 'cdf' : 'pdf',\n            as = _.as || ['value', 'density'],\n            values = [];\n\n      let domain = _.extent,\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200;\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n\n      if (_.resolve === 'shared') {\n        if (!domain) domain = extent(source, _.field);\n        minsteps = maxsteps = _.steps || maxsteps;\n      }\n\n      groups.forEach(g => {\n        const density = randomKDE(g, bandwidth)[method],\n              scale = _.counts ? g.length : 1,\n              local = domain || extent(g);\n\n        sampleCurve(density, local, minsteps, maxsteps)\n          .forEach(v => {\n            const t = {};\n            for (let i=0; i<names.length; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n            t[as[0]] = v[0];\n            t[as[1]] = v[1] * scale;\n            values.push(ingest(t));\n          });\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {inherits, key} from 'vega-util';\n\n/**\n * Generates a key function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string>} params.fields - The field name(s) for the key function.\n * @param {boolean} params.flat - A boolean flag indicating if the field names\n *  should be treated as flat property names, side-stepping nested field\n *  lookups normally indicated by dot or bracket notation.\n */\nexport default function Key(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(Key, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified()) ? this.value : key(_.fields, _.flat);\n}\n","import {Transform, ingest} from 'vega-dataflow';\nimport {array, inherits} from 'vega-util';\n\n/**\n * Load and parse data from an external source. Marshalls parameter\n * values and then invokes the Dataflow request method.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.url - The URL to load from.\n * @param {object} params.format - The data format options.\n */\nexport default function Load(params) {\n  Transform.call(this, [], params);\n  this._pending = null;\n}\n\ninherits(Load, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow;\n\n    if (this._pending) {\n      // update state and return pulse\n      return output(this, pulse, this._pending);\n    }\n\n    if (stop(_)) return pulse.StopPropagation;\n\n    if (_.values) {\n      // parse and ingest values, return output pulse\n      return output(this, pulse, df.parse(_.values, _.format));\n    } else if (_.async) {\n      // return promise for non-blocking async loading\n      const p = df.request(_.url, _.format).then(res => {\n        this._pending = array(res.data);\n        return df => df.touch(this);\n      });\n      return {async: p};\n    } else {\n      // return promise for synchronous loading\n      return df.request(_.url, _.format)\n        .then(res => output(this, pulse, array(res.data)));\n    }\n  }\n});\n\nfunction stop(_) {\n  return _.modified('async') && !(\n    _.modified('values') || _.modified('url') || _.modified('format')\n  );\n}\n\nfunction output(op, pulse, data) {\n  data.forEach(ingest);\n  const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n  out.rem = op.value;\n  op.value = out.source = out.add = data;\n  op._pending = null;\n  if (out.rem.length) out.clean(true);\n  return out;\n}\n","import {Transform} from 'vega-dataflow';\nimport {accessorName, error, inherits} from 'vega-util';\n\n/**\n * Extend tuples by joining them with values from a lookup table.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Map} params.index - The lookup table map.\n * @param {Array<function(object): *} params.fields - The fields to lookup.\n * @param {Array<string>} params.as - Output field names for each lookup value.\n * @param {*} [params.default] - A default value to use if lookup fails.\n */\nexport default function Lookup(params) {\n  Transform.call(this, {}, params);\n}\n\nLookup.Definition = {\n  'type': 'Lookup',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'index', 'type': 'index', 'params': [\n        {'name': 'from', 'type': 'data', 'required': true },\n        {'name': 'key', 'type': 'field', 'required': true }\n      ] },\n    { 'name': 'values', 'type': 'field', 'array': true },\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'as', 'type': 'string', 'array': true },\n    { 'name': 'default', 'default': null }\n  ]\n};\n\ninherits(Lookup, Transform, {\n  transform(_, pulse) {\n    const keys = _.fields,\n          index = _.index,\n          values = _.values,\n          defaultValue = _.default==null ? null : _.default,\n          reset = _.modified(),\n          n = keys.length;\n\n    let flag = reset ? pulse.SOURCE : pulse.ADD,\n        out = pulse,\n        as = _.as,\n        set, m, mods;\n\n    if (values) {\n      m = values.length;\n\n      if (n > 1 && !as) {\n        error('Multi-field lookup requires explicit \"as\" parameter.');\n      }\n      if (as && as.length !== n * m) {\n        error('The \"as\" parameter has too few output field names.');\n      }\n      as = as || values.map(accessorName);\n\n      set = function(t) {\n        for (var i=0, k=0, j, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;\n          else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);\n        }\n      };\n    } else {\n      if (!as) {\n        error('Missing output field names.');\n      }\n\n      set = function(t) {\n        for (var i=0, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          t[as[i]] = v==null ? defaultValue : v;\n        }\n      };\n    }\n\n    if (reset) {\n      out = pulse.reflow(true);\n    } else {\n      mods = keys.some(k =>pulse.modified(k.fields));\n      flag |= (mods ? pulse.MOD : 0);\n    }\n    pulse.visit(flag, set);\n\n    return out.modifies(as);\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Computes global min/max extents over a collection of extents.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<number>>} params.extents - The input extents.\n */\nexport default function MultiExtent(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(MultiExtent, Operator);\n\nfunction update(_) {\n  if (this.value && !_.modified()) {\n    return this.value;\n  }\n\n  const ext = _.extents,\n        n = ext.length;\n\n  let min = +Infinity,\n      max = -Infinity,\n      i, e;\n\n  for (i = 0; i < n; ++i) {\n    e = ext[i];\n    if (e[0] < min) min = e[0];\n    if (e[1] > max) max = e[1];\n  }\n  return [min, max];\n}\n","import {Operator} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Merge a collection of value arrays.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<*>>} params.values - The input value arrrays.\n */\nexport default function MultiValues(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(MultiValues, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified())\n    ? this.value\n    : _.values.reduce((data, _) => data.concat(_), []);\n}\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Operator whose value is simply its parameter hash. This operator is\n * useful for enabling reactive updates to values of nested objects.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nexport default function Params(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Params, Transform, {\n  transform(_, pulse) {\n    this.modified(_.modified());\n    this.value = _;\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n  }\n});\n","import Aggregate from './Aggregate';\nimport {ValidAggregateOps} from './util/AggregateOps';\nimport {accessor, accessorFields, ascending, inherits} from 'vega-util';\n\n/**\n * Aggregate and pivot selected field values to become new fields.\n * This operator is useful to construction cross-tabulations.\n * @constructor\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n * @param {function(object): *} params.field - The field to pivot on. The unique\n *  values of this field become new field names in the output stream.\n * @param {function(object): *} params.value - The field to populate pivoted fields.\n *  The aggregate values of this field become the values of the new pivoted fields.\n * @param {string} [params.op] - The aggregation operation for the value field,\n *  applied per cell in the output stream. The default is \"sum\".\n * @param {number} [params.limit] - An optional parameter indicating the maximum\n *  number of pivoted fields to generate. The pivoted field names are sorted in\n *  ascending order prior to enforcing the limit.\n */\nexport default function Pivot(params) {\n  Aggregate.call(this, params);\n}\n\nPivot.Definition = {\n  'type': 'Pivot',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'value', 'type': 'field', 'required': true },\n    { 'name': 'op', 'type': 'enum', 'values': ValidAggregateOps, 'default': 'sum' },\n    { 'name': 'limit', 'type': 'number', 'default': 0 },\n    { 'name': 'key', 'type': 'field' }\n  ]\n};\n\ninherits(Pivot, Aggregate, {\n  _transform: Aggregate.prototype.transform,\n  transform(_, pulse) {\n    return this._transform(aggregateParams(_, pulse), pulse);\n  }\n});\n\n// Shoehorn a pivot transform into an aggregate transform!\n// First collect all unique pivot field values.\n// Then generate aggregate fields for each output pivot field.\nfunction aggregateParams(_, pulse) {\n  const key    = _.field,\n        value  = _.value,\n        op     = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n        fields = accessorFields(key).concat(accessorFields(value)),\n        keys   = pivotKeys(key, _.limit || 0, pulse);\n\n  // if data stream content changes, pivot fields may change\n  // flag parameter modification to ensure re-initialization\n  if (pulse.changed()) _.set('__pivot__', null, null, true);\n\n  return {\n    key:      _.key,\n    groupby:  _.groupby,\n    ops:      keys.map(() => op),\n    fields:   keys.map(k => get(k, key, value, fields)),\n    as:       keys.map(k => k + ''),\n    modified: _.modified.bind(_)\n  };\n}\n\n// Generate aggregate field accessor.\n// Output NaN for non-existent values; aggregator will ignore!\nfunction get(k, key, value, fields) {\n  return accessor(\n    d => key(d) === k ? value(d) : NaN,\n    fields,\n    k + ''\n  );\n}\n\n// Collect (and optionally limit) all unique pivot values.\nfunction pivotKeys(key, limit, pulse) {\n  const map = {},\n        list = [];\n\n  pulse.visit(pulse.SOURCE, t => {\n    const k = key(t);\n    if (!map[k]) {\n      map[k] = 1;\n      list.push(k);\n    }\n  });\n\n  list.sort(ascending);\n\n  return limit ? list.slice(0, limit) : list;\n}\n","import Facet from './Facet';\nimport {ingest, tupleid} from 'vega-dataflow';\nimport {accessorFields, error, inherits} from 'vega-util';\n\n/**\n * Partitions pre-faceted data into tuple subflows.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): Array<object>} params.field - The field\n *   accessor for an array of subflow tuple objects.\n */\nexport default function PreFacet(params) {\n  Facet.call(this, params);\n}\n\ninherits(PreFacet, Facet, {\n  transform(_, pulse) {\n    const flow = _.subflow,\n          field = _.field,\n          subflow = t => this.subflow(tupleid(t), flow, pulse, t);\n\n    if (_.modified('field') || field && pulse.modified(accessorFields(field))) {\n      error('PreFacet does not support field modification.');\n    }\n\n    this.initTargets(); // reset list of active subflows\n\n    if (field) {\n      pulse.visit(pulse.MOD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.mod(_));\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.add(ingest(_)));\n      });\n\n      pulse.visit(pulse.REM, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.rem(_));\n      });\n    } else {\n      pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n      pulse.visit(pulse.ADD, t => subflow(t).add(t));\n      pulse.visit(pulse.REM, t => subflow(t).rem(t));\n    }\n\n    if (pulse.clean()) {\n      pulse.runAfter(() => this.clean());\n    }\n\n    return pulse;\n  }\n});\n","import {fieldNames} from './util/util';\nimport {Transform, ingest, rederive, tupleid} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Performs a relational projection, copying selected fields from source\n * tuples to a new set of derived tuples.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *} params.fields - The fields to project,\n *   as an array of field accessors. If unspecified, all fields will be\n *   copied with names unchanged.\n * @param {Array<string>} [params.as] - Output field names for each projected\n *   field. Any unspecified fields will use the field name provided by\n *   the field accessor.\n */\nexport default function Project(params) {\n  Transform.call(this, null, params);\n}\n\nProject.Definition = {\n  'type': 'Project',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true }\n  ]\n};\n\ninherits(Project, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          as = fieldNames(_.fields, _.as || []),\n          derive = fields\n            ? (s, t) => project(s, t, fields, as)\n            : rederive;\n\n    let lut;\n    if (this.value) {\n      lut = this.value;\n    } else {\n      pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t);\n      out.rem.push(lut[id]);\n      lut[id] = null;\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      const dt = derive(t, ingest({}));\n      lut[tupleid(t)] = dt;\n      out.add.push(dt);\n    });\n\n    pulse.visit(pulse.MOD, t => {\n      out.mod.push(derive(t, lut[tupleid(t)]));\n    });\n\n    return out;\n  }\n});\n\nfunction project(s, t, fields, as) {\n  for (let i=0, n=fields.length; i<n; ++i) {\n    t[as[i]] = fields[i](s);\n  }\n  return t;\n}\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Proxy the value of another operator as a pure signal value.\n * Ensures no tuples are propagated.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {*} params.value - The value to proxy, becomes the value of this operator.\n */\nexport default function Proxy(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Proxy, Transform, {\n  transform(_, pulse) {\n    this.value = _.value;\n    return _.modified('value')\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  }\n});\n","import {partition} from './util/util';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {quantiles} from 'vega-statistics';\nimport {accessorName, inherits} from 'vega-util';\nimport {range} from 'd3-array';\n\n/**\n * Generates sample quantile values from an input data stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the data field\n *   over which to calculate quantile values.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {Array<number>} [params.probs] - An array of probabilities in\n *   the range (0, 1) for which to compute quantile values. If not specified,\n *   the *step* parameter will be used.\n * @param {Array<number>} [params.step=0.01] - A probability step size for\n *   sampling quantile values. All values from one-half the step size up to\n *   1 (exclusive) will be sampled. This parameter is only used if the\n *   *quantiles* parameter is not provided.\n */\nexport default function Quantile(params) {\n  Transform.call(this, null, params);\n}\n\nQuantile.Definition = {\n  'type': 'Quantile',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'probs', 'type': 'number', 'array': true },\n    { 'name': 'step', 'type': 'number', 'default': 0.01 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'default': ['prob', 'value'] }\n  ]\n};\n\nconst EPSILON = 1e-14;\n\ninherits(Quantile, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          as = _.as || ['prob', 'value'];\n\n    if (this.value && !_.modified() && !pulse.changed()) {\n      out.source = this.value;\n      return out;\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(source, _.groupby, _.field),\n          names = (_.groupby || []).map(accessorName),\n          values = [],\n          step = _.step || 0.01,\n          p = _.probs || range(step/2, 1 - EPSILON, step),\n          n = p.length;\n\n    groups.forEach(g => {\n      const q = quantiles(g, p);\n\n      for (let i=0; i<n; ++i) {\n        const t = {};\n        for (let i=0; i<names.length; ++i) {\n          t[names[i]] = g.dims[i];\n        }\n        t[as[0]] = p[i];\n        t[as[1]] = q[i];\n        values.push(ingest(t));\n      }\n    });\n\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n\n    return out;\n  }\n});\n","import {Transform, derive, tupleid} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Relays a data stream between data processing pipelines.\n * If the derive parameter is set, this transform will create derived\n * copies of observed tuples. This provides derived data streams in which\n * modifications to the tuples do not pollute an upstream data source.\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.derive=false] - Boolean flag indicating if\n *   the transform should make derived copies of incoming tuples.\n * @constructor\n */\nexport default function Relay(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Relay, Transform, {\n  transform(_, pulse) {\n    let out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      out = pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    if (_.derive) {\n      out = pulse.fork(pulse.NO_SOURCE);\n\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t);\n        lut[tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n\n      pulse.visit(pulse.MOD, t => {\n        const dt = lut[tupleid(t)];\n        for (const k in t) {\n          dt[k] = t[k];\n          // down stream writes may overwrite re-derived tuples\n          // conservatively mark all source fields as modified\n          out.modifies(k);\n        }\n        out.mod.push(dt);\n      });\n    }\n\n    return out;\n  }\n});\n","import {Transform, tupleid} from 'vega-dataflow';\nimport {random} from 'vega-statistics';\nimport {inherits} from 'vega-util';\n\n/**\n * Samples tuples passing through this operator.\n * Uses reservoir sampling to maintain a representative sample.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.size=1000] - The maximum number of samples.\n */\nexport default function Sample(params) {\n  Transform.call(this, [], params);\n  this.count = 0;\n}\n\nSample.Definition = {\n  'type': 'Sample',\n  'metadata': {},\n  'params': [\n    { 'name': 'size', 'type': 'number', 'default': 1000 }\n  ]\n};\n\ninherits(Sample, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          mod = _.modified('size'),\n          num = _.size,\n          map = this.value.reduce((m, t) => (m[tupleid(t)] = 1, m), {});\n\n    let res = this.value,\n        cnt = this.count,\n        cap = 0;\n\n    // sample reservoir update function\n    function update(t) {\n      let p, idx;\n\n      if (res.length < num) {\n        res.push(t);\n      } else {\n        idx = ~~((cnt + 1) * random());\n        if (idx < res.length && idx >= cap) {\n          p = res[idx];\n          if (map[tupleid(p)]) out.rem.push(p); // eviction\n          res[idx] = t;\n        }\n      }\n      ++cnt;\n    }\n\n    if (pulse.rem.length) {\n      // find all tuples that should be removed, add to output\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n        if (map[id]) {\n          map[id] = -1;\n          out.rem.push(t);\n        }\n        --cnt;\n      });\n\n      // filter removed tuples out of the sample reservoir\n      res = res.filter(t => map[tupleid(t)] !== -1);\n    }\n\n    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n      // replenish sample if backing data source is available\n      cap = cnt = res.length;\n      pulse.visit(pulse.SOURCE, t => {\n        // update, but skip previously sampled tuples\n        if (!map[tupleid(t)]) update(t);\n      });\n      cap = -1;\n    }\n\n    if (mod && res.length > num) {\n      const n = res.length-num;\n      for (let i=0; i<n; ++i) {\n        map[tupleid(res[i])] = -1;\n        out.rem.push(res[i]);\n      }\n      res = res.slice(n);\n    }\n\n    if (pulse.mod.length) {\n      // propagate modified tuples in the sample reservoir\n      pulse.visit(pulse.MOD, t => {\n        if (map[tupleid(t)]) out.mod.push(t);\n      });\n    }\n\n    if (pulse.add.length) {\n      // update sample reservoir\n      pulse.visit(pulse.ADD, update);\n    }\n\n    if (pulse.add.length || cap < 0) {\n      // output newly added tuples\n      out.add = res.filter(t => !map[tupleid(t)]);\n    }\n\n    this.count = cnt;\n    this.value = out.source = res;\n    return out;\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\nimport {range} from 'd3-array';\n\n/**\n * Generates data tuples for a specified sequence range of numbers.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} params.start - The first number in the sequence.\n * @param {number} params.stop - The last number (exclusive) in the sequence.\n * @param {number} [params.step=1] - The step size between numbers in the sequence.\n */\nexport default function Sequence(params) {\n  Transform.call(this, null, params);\n}\n\nSequence.Definition = {\n  'type': 'Sequence',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'start', 'type': 'number', 'required': true },\n    { 'name': 'stop', 'type': 'number', 'required': true },\n    { 'name': 'step', 'type': 'number', 'default': 1 },\n    { 'name': 'as', 'type': 'string', 'default': 'data' }\n  ]\n};\n\ninherits(Sequence, Transform, {\n  transform(_, pulse) {\n    if (this.value && !_.modified()) return;\n\n    const out = pulse.materialize().fork(pulse.MOD),\n          as = _.as || 'data';\n\n    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n\n    this.value = range(_.start, _.stop, _.step || 1).map(v => {\n      const t = {};\n      t[as] = v;\n      return ingest(t);\n    });\n\n    out.add = pulse.add.concat(this.value);\n\n    return out;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Propagates a new pulse without any tuples so long as the input\n * pulse contains some added, removed or modified tuples.\n * @param {object} params - The parameters for this operator.\n * @constructor\n */\nexport default function Sieve(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\n\ninherits(Sieve, Transform, {\n  transform(_, pulse) {\n    this.value = pulse.source;\n    return pulse.changed()\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  }\n});\n\n","import {Transform} from 'vega-dataflow';\nimport {\n  TIME_UNITS, timeBin, timeFloor, timeInterval, timeUnits,\n  utcFloor, utcInterval\n} from 'vega-time';\nimport {accessorFields, extent, inherits, peek} from 'vega-util';\n\n/**\n * Discretize dates to specific time units.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The data field containing date/time values.\n */\nexport default function TimeUnit(params) {\n  Transform.call(this, null, params);\n}\n\nconst OUTPUT = ['unit0', 'unit1'];\n\nTimeUnit.Definition = {\n  'type': 'TimeUnit',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'interval', 'type': 'boolean', 'default': true },\n    { 'name': 'units', 'type': 'enum', 'values': TIME_UNITS, 'array': true },\n    { 'name': 'step', 'type': 'number', 'default': 1 },\n    { 'name': 'maxbins', 'type': 'number', 'default': 40 },\n    { 'name': 'extent', 'type': 'date', 'array': true},\n    { 'name': 'timezone', 'type': 'enum', 'default': 'local', 'values': ['local', 'utc'] },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': OUTPUT }\n  ]\n};\n\ninherits(TimeUnit, Transform, {\n  transform(_, pulse) {\n    const field = _.field,\n          band = _.interval !== false,\n          utc = _.timezone === 'utc',\n          floor = this._floor(_, pulse),\n          offset = (utc ? utcInterval : timeInterval)(floor.unit).offset,\n          as = _.as || OUTPUT,\n          u0 = as[0],\n          u1 = as[1],\n          step = floor.step;\n\n    let min = floor.start || Infinity,\n        max = floor.stop || -Infinity,\n        flag = pulse.ADD;\n\n    if (_.modified() || pulse.modified(accessorFields(field))) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n      min = Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(flag, t => {\n      const v = field(t);\n      let a, b;\n      if (v == null) {\n        t[u0] = null;\n        if (band) t[u1] = null;\n      } else {\n        t[u0] = a = b = floor(v);\n        if (band) t[u1] = b = offset(a, step);\n        if (a < min) min = a;\n        if (b > max) max = b;\n      }\n    });\n\n    floor.start = min;\n    floor.stop = max;\n\n    return pulse.modifies(band ? as : u0);\n  },\n\n  _floor(_, pulse) {\n    const utc = _.timezone === 'utc';\n\n    // get parameters\n    const {units, step} = _.units\n      ? {units: _.units, step: _.step || 1}\n      : timeBin({\n        extent:  _.extent || extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      });\n\n    // check / standardize time units\n    const tunits = timeUnits(units),\n          prev = this.value || {},\n          floor = (utc ? utcFloor : timeFloor)(tunits, step);\n\n    floor.unit = peek(tunits);\n    floor.units = tunits;\n    floor.step = step;\n    floor.start = prev.start;\n    floor.stop = prev.stop;\n    return this.value = floor;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {fastmap, inherits} from 'vega-util';\n\n/**\n * An index that maps from unique, string-coerced, field values to tuples.\n * Assumes that the field serves as a unique key with no duplicate values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field accessor to index.\n */\nexport default function TupleIndex(params) {\n  Transform.call(this, fastmap(), params);\n}\n\ninherits(TupleIndex, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n        field = _.field,\n        index = this.value,\n        set = t => index.set(field(t), t);\n\n    let mod = true;\n\n    if (_.modified('field') || pulse.modified(field.fields)) {\n      index.clear();\n      pulse.visit(pulse.SOURCE, set);\n    } else if (pulse.changed()) {\n      pulse.visit(pulse.REM, t => index.delete(field(t)));\n      pulse.visit(pulse.ADD, set);\n    } else {\n      mod = false;\n    }\n\n    this.modified(mod);\n    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n    return pulse.fork();\n  }\n});\n","import {Transform, stableCompare} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Extracts an array of values. Assumes the source data has already been\n * reduced as needed (e.g., by an upstream Aggregate transform).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The domain field to extract.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for sorting the values. The comparator will be\n *   applied to backing tuples prior to value extraction.\n */\nexport default function Values(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Values, Transform, {\n  transform(_, pulse) {\n    const run = !this.value\n      || _.modified('field')\n      || _.modified('sort')\n      || pulse.changed()\n      || (_.sort && pulse.modified(_.sort.fields));\n\n    if (run) {\n      this.value = (_.sort\n        ? pulse.source.slice().sort(stableCompare(_.sort))\n        : pulse.source).map(_.field);\n    }\n  }\n});","import {error, zero} from 'vega-util';\n\nexport function WindowOp(op, field, param, as) {\n  const fn = WindowOps[op](field, param);\n  return {\n    init:   fn.init || zero,\n    update: function(w, t) { t[as] = fn.next(w); }\n  };\n}\n\nexport const WindowOps = {\n  row_number: function() {\n    return {\n      next: w => w.index + 1\n    };\n  },\n  rank: function() {\n    let rank;\n    return {\n      init: () => rank = 1,\n      next: w => {\n        const i = w.index,\n              data = w.data;\n        return (i && w.compare(data[i - 1], data[i])) ? (rank = i + 1) : rank;\n      }\n    };\n  },\n  dense_rank: function() {\n    let drank;\n    return {\n      init: () => drank = 1,\n      next: w => {\n        const i = w.index,\n              d = w.data;\n        return (i && w.compare(d[i - 1], d[i])) ? ++drank : drank;\n      }\n    };\n  },\n  percent_rank: function() {\n    const rank = WindowOps.rank(),\n          next = rank.next;\n    return {\n      init: rank.init,\n      next: w => (next(w) - 1) / (w.data.length - 1)\n    };\n  },\n  cume_dist: function() {\n    let cume;\n    return {\n      init: () => cume = 0,\n      next: w => {\n        const d = w.data,\n              c = w.compare;\n        let i = w.index;\n        if (cume < i) {\n          while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n          cume = i;\n        }\n        return (1 + cume) / d.length;\n      }\n    };\n  },\n  ntile: function(field, num) {\n    num = +num;\n    if (!(num > 0)) error('ntile num must be greater than zero.');\n    const cume = WindowOps.cume_dist(),\n          next = cume.next;\n    return {\n      init: cume.init,\n      next: w => Math.ceil(num * next(w))\n    };\n  },\n\n  lag: function(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: w => {\n        const i = w.index - offset;\n        return i >= 0 ? field(w.data[i]) : null;\n      }\n    };\n  },\n  lead: function(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: w => {\n        const i = w.index + offset,\n            d = w.data;\n        return i < d.length ? field(d[i]) : null;\n      }\n    };\n  },\n\n  first_value: function(field) {\n    return {\n      next: w => field(w.data[w.i0])\n    };\n  },\n  last_value: function(field) {\n    return {\n      next: w => field(w.data[w.i1 - 1])\n    };\n  },\n  nth_value: function(field, nth) {\n    nth = +nth;\n    if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n    return {\n      next: w => {\n        const i = w.i0 + (nth - 1);\n        return i < w.i1 ? field(w.data[i]) : null;\n      }\n    };\n  },\n\n  prev_value: function(field) {\n    let prev;\n    return {\n      init: () => prev = null,\n      next: w => {\n        const v = field(w.data[w.index]);\n        return v != null ? (prev = v) : prev;\n      }\n    };\n  },\n  next_value: function(field) {\n    let v, i;\n    return {\n      init: () => (v = null, i = -1),\n      next: w => {\n        const d = w.data;\n        return w.index <= i ? v\n          : (i = find(field, d, w.index)) < 0\n            ? (i = d.length, v = null)\n            : (v = field(d[i]));\n      }\n    };\n  }\n};\n\nfunction find(field, data, index) {\n  for (let n = data.length; index < n; ++index) {\n    const v = field(data[index]);\n    if (v != null) return index;\n  }\n  return -1;\n}\n\nexport const ValidWindowOps = Object.keys(WindowOps);\n","import {compileMeasures, createMeasure, measureName} from './AggregateOps';\nimport TupleStore from './TupleStore';\nimport {WindowOp, WindowOps} from './WindowOps';\nimport {accessorFields, accessorName, array, error, hasOwnProperty} from 'vega-util';\n\nexport default function WindowState(_) {\n  const ops = array(_.ops),\n        fields = array(_.fields),\n        params = array(_.params),\n        as = array(_.as),\n        outputs = this.outputs = [],\n        windows = this.windows = [],\n        inputs = {},\n        map = {},\n        counts = [],\n        measures = [];\n\n  let countOnly = true;\n\n  function visitInputs(f) {\n    array(accessorFields(f)).forEach(_ => inputs[_] = 1);\n  }\n  visitInputs(_.sort);\n\n  ops.forEach((op, i) => {\n    const field = fields[i],\n          mname = accessorName(field),\n          name = measureName(op, mname, as[i]);\n\n    visitInputs(field);\n    outputs.push(name);\n\n    // Window operation\n    if (hasOwnProperty(WindowOps, op)) {\n      windows.push(WindowOp(op, fields[i], params[i], name));\n    }\n\n    // Aggregate operation\n    else {\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n      if (op === 'count') {\n        counts.push(name);\n        return;\n      }\n\n      countOnly = false;\n      let m = map[mname];\n      if (!m) {\n        m = (map[mname] = []);\n        m.field = field;\n        measures.push(m);\n      }\n      m.push(createMeasure(op, name));\n    }\n  });\n\n  if (counts.length || measures.length) {\n    this.cell = cell(measures, counts, countOnly);\n  }\n\n  this.inputs = Object.keys(inputs);\n}\n\nconst prototype = WindowState.prototype;\n\nprototype.init = function() {\n  this.windows.forEach(_ => _.init());\n  if (this.cell) this.cell.init();\n};\n\nprototype.update = function(w, t) {\n  const cell = this.cell,\n        wind = this.windows,\n        data = w.data,\n        m = wind && wind.length;\n  let j;\n\n  if (cell) {\n    for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n    for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n    cell.set(t);\n  }\n  for (j = 0; j < m; ++j) wind[j].update(w, t);\n};\n\nfunction cell(measures, counts, countOnly) {\n  measures = measures.map(m => compileMeasures(m, m.field));\n\n  const cell = {\n    num:   0,\n    agg:   null,\n    store: false,\n    count: counts\n  };\n\n  if (!countOnly) {\n    var n = measures.length,\n        a = cell.agg = Array(n),\n        i = 0;\n    for (; i<n; ++i) a[i] = new measures[i](cell);\n  }\n\n  if (cell.store) {\n    var store = cell.data = new TupleStore();\n  }\n\n  cell.add = function(t) {\n    cell.num += 1;\n    if (countOnly) return;\n    if (store) store.add(t);\n    for (let i=0; i<n; ++i) {\n      a[i].add(a[i].get(t), t);\n    }\n  };\n\n  cell.rem = function(t) {\n    cell.num -= 1;\n    if (countOnly) return;\n    if (store) store.rem(t);\n    for (let i=0; i<n; ++i) {\n      a[i].rem(a[i].get(t), t);\n    }\n  };\n\n  cell.set = function(t) {\n    let i, n;\n\n    // consolidate stored values\n    if (store) store.values();\n\n    // update tuple properties\n    for (i=0, n=counts.length; i<n; ++i) t[counts[i]] = cell.num;\n    if (!countOnly) for (i=0, n=a.length; i<n; ++i) a[i].set(t);\n  };\n\n  cell.init = function() {\n    cell.num = 0;\n    if (store) store.reset();\n    for (let i=0; i<n; ++i) a[i].init();\n  };\n\n  return cell;\n}\n","import {groupkey} from './util/AggregateKeys';\nimport {ValidAggregateOps} from './util/AggregateOps';\nimport SortedList from './util/SortedList';\nimport {ValidWindowOps} from './util/WindowOps';\nimport WindowState from './util/WindowState';\nimport {Transform, stableCompare, tupleid} from 'vega-dataflow';\nimport {constant, inherits} from 'vega-util';\nimport {bisector} from 'd3-array';\n\n/**\n * Perform window calculations and write results to the input stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors\n *   for data fields to use as inputs to window operations.\n * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n * @param {Array<string>} [params.as] - An array of output field names for window operations.\n * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n *   number alone, ignoring peers with identical sort values. If false (default),\n *   the window boundaries will be adjusted to include peer values.\n */\nexport default function Window(params) {\n  Transform.call(this, {}, params);\n  this._mlen = 0;\n  this._mods = [];\n}\n\nWindow.Definition = {\n  'type': 'Window',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidWindowOps.concat(ValidAggregateOps) },\n    { 'name': 'params', 'type': 'number', 'null': true, 'array': true },\n    { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n    { 'name': 'frame', 'type': 'number', 'null': true, 'array': true, 'length': 2, 'default': [null, 0] },\n    { 'name': 'ignorePeers', 'type': 'boolean', 'default': false }\n  ]\n};\n\ninherits(Window, Transform, {\n  transform(_, pulse) {\n    this.stamp = pulse.stamp;\n\n    const mod = _.modified(),\n          cmp = stableCompare(_.sort),\n          key = groupkey(_.groupby),\n          group = t => this.group(key(t));\n\n    // initialize window state\n    let state = this.state;\n    if (!state || mod) {\n      state = this.state = new WindowState(_);\n    }\n\n    // partition input tuples\n    if (mod || pulse.modified(state.inputs)) {\n      this.value = {};\n      pulse.visit(pulse.SOURCE, t => group(t).add(t));\n    } else {\n      pulse.visit(pulse.REM, t => group(t).remove(t));\n      pulse.visit(pulse.ADD, t => group(t).add(t));\n    }\n\n    // perform window calculations for each modified partition\n    for (let i=0, n=this._mlen; i<n; ++i) {\n      processPartition(this._mods[i], state, cmp, _);\n    }\n    this._mlen = 0;\n    this._mods = [];\n\n    // TODO don't reflow everything?\n    return pulse.reflow(mod).modifies(state.outputs);\n  },\n\n  group(key) {\n    let group = this.value[key];\n\n    if (!group) {\n      group = this.value[key] = SortedList(tupleid);\n      group.stamp = -1;\n    }\n\n    if (group.stamp < this.stamp) {\n      group.stamp = this.stamp;\n      this._mods[this._mlen++] = group;\n    }\n\n    return group;\n  }\n});\n\nfunction processPartition(list, state, cmp, _) {\n  const sort = _.sort,\n        range = sort && !_.ignorePeers,\n        frame = _.frame || [null, 0],\n        data = list.data(cmp), // use cmp for stable sort\n        n = data.length,\n        b = range ? bisector(sort) : null,\n        w = {\n          i0: 0, i1: 0, p0: 0, p1: 0, index: 0,\n          data: data, compare: sort || constant(-1)\n        };\n\n  state.init();\n  for (let i=0; i<n; ++i) {\n    setWindow(w, frame, i, n);\n    if (range) adjustRange(w, b);\n    state.update(w, data[i]);\n  }\n}\n\nfunction setWindow(w, f, i, n) {\n  w.p0 = w.i0;\n  w.p1 = w.i1;\n  w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n  w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n  w.index = i;\n}\n\n// if frame type is 'range', adjust window for peer values\nfunction adjustRange(w, bisect) {\n  const r0 = w.i0,\n        r1 = w.i1 - 1,\n        c = w.compare,\n        d = w.data,\n        n = d.length - 1;\n\n  if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);\n  if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);\n}\n"],"names":["groupkey","fields","length","f","x","n","i","k","String","measureName","op","field","as","noop","base_op","init","add","rem","idx","AggregateOps","values","m","cell","store","value","data","count","num","__count__","missing","valid","sum","v","product","undefined","mean","mean_d","average","req","variance","dev","variancep","stdev","Math","sqrt","stdevp","stderr","distinct","get","ci0","ci1","median","q2","q1","q3","min","Number","isNaN","NaN","max","argmin","t","argmax","ValidAggregateOps","Object","keys","createMeasure","name","compareIndex","a","b","_ops","forEach","this","set","_out","out","compileMeasures","agg","identity","ops","map","getreqs","key","sort","resolve","slice","ctr","prototype","TupleStore","_key","tupleid","reset","extend","measure","Aggregate","params","Transform","call","_adds","_mods","_alen","_mlen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_counts","_prev","_inputs","_outputs","_add","_rem","_ext","_get","_q","push","r","Array","j","s","hasOwnProperty","extent","extentIndex","quartile","quartiles","ci","_ci","bootstrapCI","Definition","transform","_","pulse","aggr","fork","NO_SOURCE","NO_FIELDS","mod","modified","stamp","visit","SOURCE","REM","ADD","modifies","drop","cross","clean","runAfter","changes","curr","dims","vals","collect","cells","tuple","generate","base","index","inputs","outputs","inputMap","inputVisit","array","accessorFields","groupby","d","dname","accessorName","cellkey","mname","outname","error","newcell","newtuple","measures","p","names","replace","ingest","celltuple","counts","adds","mods","prev","Bin","idFunc","source","input","$","cnt","remove","size","compare","resort","filter","merge","concat","Collect","Compare","Operator","update","orders","CountPattern","Cross","band","interval","bins","_bins","start","step","b0","b1","flag","reflow","ADD_MOD","bin","stop","ceil","anchor","floor","toNumber","Infinity","accessor","ALL","list","SortedList","materialize","changed","stableCompare","root","process","tokens","text","tcase","match","toUpperCase","toLowerCase","tokenize","case","test","_parameterCheck","_match","_stop","_finish","RegExp","stopwords","pattern","tuples","_tuples","w","c","ADD_REM","left","truthy","Distributions","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","FUNCTION","parse","def","func","from","Density","distributions","fieldNames","partition","groups","g","dist","parseDist","distribution","minsteps","steps","maxsteps","method","domain","sampleCurve","DotBin","Expression","expr","datum","Extent","Subflow","parent","Facet","_keys","fastmap","_targets","active","Field","isArray","Filter","Flatten","Fold","Formula","Generate","delta","lo","hi","mid","ascending","ascendingComparator","center","right","valueof","quickselect","z","log","exp","sd","swap","quantile","Float64Array","numbers","i0","value0","subarray","arguments","range","smooth","span","autostep","dotbin","isFinite","dataflow","warn","connect","target","detachSubflow","targets","evaluate","activate","flow","subflow","flows","df","sf","_group","detached","detach","initTargets","act","cache","rekey","group","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","output","isMod","revisit","has","arrays","maxlen","reduce","l","derive","fnames","initonly","gen","generator","Methods","Empty","Impute","JoinAggregate","KDE","Key","flat","Load","_pending","Lookup","MultiExtent","ext","extents","e","MultiValues","Params","Pivot","PreFacet","Project","Proxy","Quantile","gVals","kVal","impute","getValue","getField","fName","kName","gNames","keyvals","gKey","kMap","gMap","_impute","bandwidth","cumulative","density","scale","local","StopPropagation","format","async","request","url","then","res","touch","defaultValue","default","some","_transform","limit","pivotKeys","bind","aggregateParams","project","rederive","lut","addAll","dt","Relay","Sample","Sequence","Sieve","TimeUnit","probs","q","quantiles","cap","random","OUTPUT","TupleIndex","Values","TIME_UNITS","utc","timezone","_floor","offset","utcInterval","timeInterval","unit","u0","u1","units","timeBin","maxbins","tunits","timeUnits","utcFloor","timeFloor","peek","clear","WindowOps","row_number","next","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","last_value","i1","nth_value","nth","prev_value","next_value","find","ValidWindowOps","WindowState","windows","countOnly","visitInputs","param","fn","zero","WindowOp","Window","processPartition","state","cmp","ignorePeers","frame","bisector","p0","p1","constant","setWindow","adjustRange","abs","bisect","r0","r1","wind"],"mappings":"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"}