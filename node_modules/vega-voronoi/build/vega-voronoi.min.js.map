{"version":3,"file":"vega-voronoi.min.js","sources":["../../../node_modules/delaunator/index.js","../../../node_modules/d3-delaunay/src/path.js","../../../node_modules/d3-delaunay/src/polygon.js","../../../node_modules/d3-delaunay/src/voronoi.js","../../../node_modules/d3-delaunay/src/delaunay.js","../src/Voronoi.js"],"sourcesContent":["\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\n// return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\nfunction orientIfSure(px, py, rx, ry, qx, qy) {\n    const l = (ry - py) * (qx - px);\n    const r = (rx - px) * (qy - py);\n    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n}\n\n// a more robust orientation test that's stable in a given triangle (to fix robustness issues)\nfunction orient(rx, ry, qx, qy, px, py) {\n    const sign = orientIfSure(px, py, rx, ry, qx, qy) ||\n    orientIfSure(rx, ry, qx, qy, px, py) ||\n    orientIfSure(qx, qy, px, py, rx, ry);\n    return sign < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n","export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n","import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const bl = dx * dx + dy * dy;\n      const cl = ex * ex + ey * ey;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (!ab) {\n        // degenerate case (collinear diagram)\n        x = (x1 + x3) / 2 - 1e8 * ey;\n        y = (y1 + y3) / 2 + 1e8 * ex;\n      }\n      else if (Math.abs(ab) < 1e-8) {\n        // almost equal points (degenerate triangle)\n        x = (x1 + x3) / 2;\n        y = (y1 + y3) / 2;\n      } else {\n        const d = 1 / ab;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj]\n          && ci[ai + 1] == cj[aj + 1]\n          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\n          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\n          ) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k]\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n          P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n","import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      this.triangles[1] = hull[1];\n      this.triangles[2] = hull[1];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) inedges[hull[1]] = 0;\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r = 2) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\nimport {Delaunay} from 'd3-delaunay';\n\nexport default function Voronoi(params) {\n  Transform.call(this, null, params);\n}\n\nVoronoi.Definition = {\n  'type': 'Voronoi',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'x', 'type': 'field', 'required': true },\n    { 'name': 'y', 'type': 'field', 'required': true },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'extent', 'type': 'array', 'array': true, 'length': 2,\n      'default': [[-1e5, -1e5], [1e5, 1e5]],\n      'content': {'type': 'number', 'array': true, 'length': 2} },\n    { 'name': 'as', 'type': 'string', 'default': 'path' }\n  ]\n};\n\nconst defaultExtent = [-1e5, -1e5, 1e5, 1e5];\n\ninherits(Voronoi, Transform, {\n  transform(_, pulse) {\n    const as = _.as || 'path',\n          data = pulse.source;\n\n    // nothing to do if no data\n    if (!data || !data.length) return pulse;\n\n    // configure and construct voronoi diagram\n    let s = _.size;\n    s = s ? [0, 0, s[0], s[1]]\n      : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]]\n      : defaultExtent;\n\n    const voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s);\n\n    // map polygons to paths\n    for (let i=0, n=data.length; i<n; ++i) {\n      const polygon = voronoi.cellPolygon(i);\n      data[i][as] = polygon ? toPathString(polygon) : null;\n    }\n\n    return pulse.reflow(_.modified()).modifies(as);\n  }\n});\n\n// suppress duplicated end point vertices\nfunction toPathString(p) {\n  const x = p[0][0],\n        y = p[0][1];\n\n  let n = p.length - 1;\n  for (; p[n][0] === x && p[n][1] === y; --n);\n\n  return 'M' + p.slice(0, n + 1).join('L') + 'Z';\n}\n"],"names":["EPSILON","Math","pow","EDGE_STACK","Uint32Array","Delaunator","points","getX","defaultGetX","getY","defaultGetY","n","length","coords","Float64Array","i","p","constructor","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","this","fill","_ids","_dists","update","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","x","y","cx","cy","i0","i1","i2","minDist","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","quicksort","hull","j","d0","id","subarray","triangles","halfedges","orient","center","ax","ay","bx","by","dx","dy","ex","ey","bl","cl","circumcenter","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","k","abs","start","key","q","e","t","_legalize","floor","pseudoAngle","a","ar","b","a0","b0","al","p0","pr","pl","p1","inCircle","hbl","_link","br","c","orientIfSure","px","py","rx","ry","qx","qy","l","fx","fy","bp","cp","ids","dists","left","right","temp","tempDist","swap","arr","tmp","epsilon","Path","_x0","_y0","_x1","_y1","_","moveTo","closePath","lineTo","arc","x0","y0","rect","w","h","value","Polygon","push","slice","Voronoi","delaunay","xmin","ymin","xmax","ymax","_circumcenters","vectors","_init","circumcenters","t1","t2","t3","x1","y1","x2","y2","x3","y3","ab","render","context","buffer","undefined","inedges","ti","tj","xi","yi","xj","yj","_renderSegment","h0","h1","v","_project","renderBounds","renderCell","_clip","cell","cellPolygon","index","polygon","S","c0","_regioncode","c1","_clipSegment","contains","_step","ci","neighbors","cj","loop","ai","li","aj","lj","_cell","e0","V","_clipInfinite","_clipFinite","e1","P","sx0","sy0","sx1","sy1","_edgecode","_edge","vx0","vy0","vxn","vyn","Array","from","unshift","splice","vx","vy","tau","PI","pointX","pointY","jitter","sin","cos","Delaunay","that","array","call","flatArray","flatIterable","_delaunator","_hullIndex","collinear","sort","f","bounds","hypot","hullIndex","voronoi","indexOf","find","dc","dt","renderHull","renderPoints","hullPolygon","renderTriangle","t0","trianglePolygon","params","Transform","Definition","defaultExtent","toPathString","join","transform","pulse","as","data","source","s","size","extent","reflow","modified","modifies"],"mappings":"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"}